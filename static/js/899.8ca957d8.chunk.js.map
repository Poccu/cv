{"version":3,"file":"static/js/899.8ca957d8.chunk.js","mappings":"6bA4BMA,EAASC,mCACTC,EAASD,0CAGTE,EAAkBF,gEAClBG,EACJH,gEAEII,GAAYC,EAAAA,EAAAA,KAAO,SAACC,GAAD,OACvB,SAAC,KAAD,QAAcC,gBAAc,EAACC,UAAW,EAAGC,QAAM,GAAKH,MADtCD,EAEf,gBAAGK,EAAH,EAAGA,MAAH,MAAgB,CACjBC,aAAa,aAAD,OAAeD,EAAME,QAAQC,aAGrCC,GAAmBT,EAAAA,EAAAA,KAAO,SAACC,GAAD,OAC9B,SAAC,KAAD,QACES,YACE,SAAC,IAAD,CAA0BC,GAAI,CAAEC,SAAU,QAAUC,MAAM,eAExDZ,MALiBD,EAOtB,gBAAGK,EAAH,EAAGA,MAAH,MAAgB,CACjBS,gBAAiBT,EAAME,QAAQQ,WAAWC,QAC1CC,cAAe,cACf,wDAAyD,CACvDC,UAAW,iBAEb,iCAAkC,CAChCC,WAAYd,EAAMe,QAAQ,QAIxBC,GAAmBrB,EAAAA,EAAAA,IAAOsB,EAAAA,EAAPtB,EAA4B,gBAAGK,EAAH,EAAGA,MAAH,MAAgB,CACnES,gBAAiBT,EAAME,QAAQQ,WAAWC,QAC1CO,QAASlB,EAAMe,QAAQ,OAGnBI,EAAQC,EAAAA,YAAiB,SAAexB,EAAOyB,GACnD,OAAO,SAAC,KAAD,QAAUvB,UAAW,EAAGuB,IAAKA,EAAKC,QAAQ,UAAa1B,OAG1D2B,EAAQ,CAEZhB,SAAU,GACViB,aAAc,GACdC,OAAQ,EAERC,OAAQ,GACRR,QAAS,UAILS,GAAShC,EAAAA,EAAAA,IAAO,MAAPA,EAAc,gBAAGK,EAAH,EAAGA,MAAH,eAC3B4B,SAAU,WACVJ,aAAcxB,EAAM6B,MAAML,aAC1Bf,iBAAiBqB,EAAAA,EAAAA,IAAM9B,EAAME,QAAQ6B,OAAOC,QAAS,IACrD,UAAW,CACTvB,iBAAiBqB,EAAAA,EAAAA,IAAM9B,EAAME,QAAQ6B,OAAOC,QAAS,MAEvDC,YAAajC,EAAMe,QAAQ,GAC3BD,WAAY,EACZoB,MAAO,QACNlC,EAAMmC,YAAYC,GAAG,MAAQ,CAC5BtB,WAAYd,EAAMe,QAAQ,GAC1BmB,MAAO,aAILG,GAAoB1C,EAAAA,EAAAA,IAAO,MAAPA,EAAc,kBAAgB,CACtDuB,QADsC,EAAGlB,MAC1Be,QAAQ,EAAG,GAC1BW,OAAQ,OACRE,SAAU,WACVU,cAAe,OACfC,QAAS,OACTC,WAAY,SACZC,eAAgB,aAGZC,GAAkB/C,EAAAA,EAAAA,IAAOgD,EAAAA,GAAPhD,EAAkB,gBAAGK,EAAH,EAAGA,MAAH,MAAgB,CACxDQ,MAAO,UACP,yBAAwB,QACtBU,QAASlB,EAAMe,QAAQ,EAAG,EAAG,EAAG,GAEhC6B,YAAY,cAAD,OAAgB5C,EAAMe,QAAQ,GAA9B,KACX8B,WAAY7C,EAAM8C,YAAYC,OAAO,SACrCb,MAAO,QACNlC,EAAMmC,YAAYC,GAAG,MAAQ,CAC5BF,MAAO,cAKE,SAASc,IAAW,IAAD,oBAChC,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACA,IAA0BN,EAAAA,EAAAA,WAAS,GAAnC,iBAAOO,GAAP,MAAcC,GAAd,MACA,IAAwBR,EAAAA,EAAAA,WAAS,GAAjC,iBAAOS,GAAP,MAAaC,GAAb,MAEA,IAAsBV,EAAAA,EAAAA,UAAS,GAA/B,iBAAOW,GAAP,MAAYC,GAAZ,MACA,IAAsBZ,EAAAA,EAAAA,UAAS,GAA/B,iBAAOa,GAAP,MAAYC,GAAZ,MAEA,IAAgCd,EAAAA,EAAAA,UAAS,IAAzC,iBAAOe,GAAP,MAAiBC,GAAjB,MACA,IAA4BhB,EAAAA,EAAAA,UAAS,GAArC,iBAAOiB,GAAP,MAAeC,GAAf,MAEA,IAA4ClB,EAAAA,EAAAA,UAAS,IAArD,iBAAOmB,GAAP,MAAuBC,GAAvB,OAGAC,EAAAA,EAAAA,YAAU,WACRnB,EAAQoB,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,iBAC/CtB,EAAYkB,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,cACnDpB,EAAWgB,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,aAClDd,GAAOU,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,SAC9CZ,GAAOQ,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,SAC9CV,GAAYM,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,cACnDR,GAAUI,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,YACjDN,GAAkBE,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,sBACxD,KAEHL,EAAAA,EAAAA,YAAU,WACRG,OAAOC,aAAaE,QAAQ,cAAeL,KAAKM,UAAU3B,MACzD,CAACA,KAEJoB,EAAAA,EAAAA,YAAU,WACRG,OAAOC,aAAaE,QAAQ,WAAYL,KAAKM,UAAUzB,MACtD,CAACA,KAEJkB,EAAAA,EAAAA,YAAU,WACRG,OAAOC,aAAaE,QAAQ,UAAWL,KAAKM,UAAUvB,MACrD,CAACA,KAEJgB,EAAAA,EAAAA,YAAU,WACRG,OAAOC,aAAaE,QAAQ,MAAOL,KAAKM,UAAUjB,OACjD,CAACA,MAEJU,EAAAA,EAAAA,YAAU,WACRG,OAAOC,aAAaE,QAAQ,MAAOL,KAAKM,UAAUf,OACjD,CAACA,MAEJQ,EAAAA,EAAAA,YAAU,WACRG,OAAOC,aAAaE,QAAQ,WAAYL,KAAKM,UAAUb,OACtD,CAACA,MAEJM,EAAAA,EAAAA,YAAU,WACRG,OAAOC,aAAaE,QAAQ,SAAUL,KAAKM,UAAUX,OACpD,CAACA,MAEJI,EAAAA,EAAAA,YAAU,WACRG,OAAOC,aAAaE,QAClB,iBACAL,KAAKM,UAAUT,OAEhB,CAACA,KAEJ,QAAgCnB,EAAAA,EAAAA,UAAS,IAAzC,iBAAO6B,GAAP,MAAiBC,GAAjB,MAEMC,GAAe,SAACC,GAAD,OAAW,SAACC,EAAOC,GACtCJ,KAAYI,GAAcF,MAgC5BX,EAAAA,EAAAA,YAAU,WACR,IAAMc,EAAW,UAAM7F,EAAN,wBAA4BqE,GAA5B,gBAAuCE,GAAvC,mCAAqEzE,GACtFgG,IAAAA,IACOD,GACJE,MAAK,SAACC,GACLtB,GAAYsB,EAASrC,MAGrB,IAAIsC,EAAM,CACR,CACEC,GAAIF,EAASrC,KAAKwC,MAAM,GAAGC,QAC3BC,KAAM,IACNC,QAAS,CAAC,CAAEC,GAAI,OAElB,CACEL,GAAIF,EAASrC,KAAKwC,MAAM,GAAGC,QAC3BC,KAAM,IACNC,QAAS,CAAC,CAAEC,GAAI,OAElB,CACEL,GAAIF,EAASrC,KAAKwC,MAAM,GAAGC,QAC3BC,KAAM,IACNC,QAAS,CAAC,CAAEC,GAAI,OAElB,CACEL,GAAIF,EAASrC,KAAKwC,MAAM,GAAGK,OAC3BH,KAAM,IACNC,QAAS,CAAC,CAAEC,GAAI,OAElB,CACEL,GAAIF,EAASrC,KAAKwC,MAAM,GAAGK,OAC3BH,KAAM,IACNC,QAAS,CAAC,CAAEC,GAAI,OAElB,CACEL,GAAIF,EAASrC,KAAKwC,MAAM,GAAGK,OAC3BH,KAAM,IACNC,QAAS,CAAC,CAAEC,GAAI,QAIpBzB,GACE,kBAAIkB,EAASrC,KAAK8C,QAAWR,GAC1BS,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAET,GAAKU,EAAEV,MACxBW,QAAO,SAACC,GAAD,OAAOA,EAAEZ,GAAKF,EAASrC,KAAKoD,QAAQb,UAUjDc,OAAM,SAAC/C,GACNC,IAAS,GACTE,IAAQ,GACR6C,QAAQhD,MAAM,wBAAsBA,MAExCC,IAAS,GACTJ,EAAY,MACX,CAACH,IAEJ,IAgDMuD,GAAc,SAACvB,EAAOwB,GACX,cAAXA,GAGJ/C,IAAQ,IAONgD,GAAO,IAAIC,KAEXC,GAAY,IAAIC,KAAKC,eAAe,QAD1B,CAAEC,QAAS,OAAQC,MAAO,OAAQC,IAAK,YACKC,OAAOR,IAE3DS,GAAkB,SAACf,GACvB,IAAIgB,EAAgBrD,GAAS0B,MAAMW,GAAGZ,GAClC6B,EAAe,IAAIV,KAAqB,IAAhBS,GAE5B,OAAO,IAAIP,KAAKC,eAAe,QADjB,CAAEE,MAAO,OAAQC,IAAK,YACaC,OAAOG,IAGpDC,GAAqB,SAAClB,GAC1B,IAAIgB,EAAgBrD,GAAS0B,MAAMW,GAAGZ,GAClC6B,EAAe,IAAIV,KAAqB,IAAhBS,GAE5B,OAAO,IAAIP,KAAKC,eAAe,QADjB,CAAEC,QAAS,SACwBG,OAAOG,IAGpDE,GAAkB,SAACnB,EAAGoB,GAC1B,IAAIJ,EAAgBjD,GAAeiC,GAAGZ,GAClC6B,EAAe,IAAIV,KAAqB,IAAhBS,GACxBK,EAAU,CAAEC,UAAW,QAASC,SAAUH,GAC9C,OAAO,IAAIX,KAAKC,eAAe,QAASW,GAASP,OAAOG,IAGpDO,GAAuB,SAACC,EAAML,GAClC,IAAIH,EAAe,IAAIV,KAAY,IAAPkB,GACxBJ,EAAU,CAAEC,UAAW,QAASC,SAAUH,GAC9C,OAAO,IAAIX,KAAKC,eAAe,QAASW,GAASP,OAAOG,IAGpDS,GAAe,SAACC,GAOpB,OAJAA,EAAqB,EAAVA,EAAe,IAFP,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,MAI1DA,IADAA,EAAUC,KAAKC,MAAMF,EAAS,IACT,GAAK,IAK5B,SAASG,GAAkBrC,GAAK,IAAD,IACzBsC,EAAU,OAAGpE,SAAH,IAAGA,IAAH,UAAGA,GAAUsC,eAAb,iBAAG,EAAmBT,QAAQ,UAA9B,aAAG,EAA+BwC,KAGhD,GAAe,MAFFD,EAAWE,MAAMF,EAAWG,OAAS,GAGhD,OAAQzC,GACN,KAAK,IACH,MAAO,8BAET,KAAK,IACL,KAAK,IACH,MAAO,0BAET,KAAK,IACH,MAAO,yBAET,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,qBAET,KAAK,IACH,MAAO,iCAET,KAAK,IACL,KAAK,IACH,MAAO,eAET,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IAaL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,YAdT,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,8BAET,KAAK,IAaL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,YAbT,KAAK,IACL,KAAK,IACH,MAAO,8BAaT,KAAK,IACH,MAAO,YAET,KAAK,IACH,MAAO,+BAET,KAAK,IACH,MAAO,gBAET,KAAK,IAML,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,gBANT,KAAK,IACH,MAAO,eAOT,KAAK,IACH,MAAO,YAET,KAAK,IACH,MAAO,eAET,KAAK,IACH,MAAO,iBAET,KAAK,IAGL,KAAK,IAEH,MAAO,yBAET,KAAK,IACL,KAAK,IACH,MAAO,oBAET,QACE,MAAO,0BAGX,OAAQA,GACN,KAAK,IACH,MAAO,gCAET,KAAK,IACL,KAAK,IACH,MAAO,0BAET,KAAK,IACH,MAAO,2BAET,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,qBAET,KAAK,IACH,MAAO,mCAET,KAAK,IACL,KAAK,IACH,MAAO,eAET,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IAaL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,YAdT,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,gCAET,KAAK,IAaL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,YAbT,KAAK,IACL,KAAK,IACH,MAAO,gCAaT,KAAK,IACH,MAAO,YAET,KAAK,IACH,MAAO,iCAET,KAAK,IACH,MAAO,kBAET,KAAK,IAML,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,kBANT,KAAK,IACH,MAAO,iBAOT,KAAK,IACH,MAAO,YAET,KAAK,IACH,MAAO,eAET,KAAK,IACH,MAAO,mBAGT,KAAK,IAGL,KAAK,IAEH,MAAO,2BAET,KAAK,IACL,KAAK,IACH,MAAO,sBAET,QACE,MAAO,sBAKf,SAAS0C,GAAiB1C,EAAIO,GAAI,IAAD,wBAC3BoC,GACF,UAAArE,GAAeiC,UAAf,eAAmBZ,KAAnB,OAAwBzB,SAAxB,IAAwBA,IAAxB,UAAwBA,GAAU0B,MAAM,UAAxC,aAAwB,EAAoBC,WAC5C,UAAAvB,GAAeiC,UAAf,eAAmBZ,KAAnB,OAAwBzB,SAAxB,IAAwBA,IAAxB,UAAwBA,GAAU0B,MAAM,UAAxC,aAAwB,EAAoBK,QAE1C2C,GACF,UAAAtE,GAAeiC,UAAf,eAAmBZ,KAAnB,OAAwBzB,SAAxB,IAAwBA,IAAxB,UAAwBA,GAAU0B,MAAM,UAAxC,aAAwB,EAAoBC,WAC5C,UAAAvB,GAAeiC,UAAf,eAAmBZ,KAAnB,OAAwBzB,SAAxB,IAAwBA,IAAxB,UAAwBA,GAAU0B,MAAM,UAAxC,aAAwB,EAAoBK,QAE1C4C,GAAY,UAAAvE,GAAeiC,UAAf,eAAmBZ,OAAnB,OAA0BzB,SAA1B,IAA0BA,IAA1B,UAA0BA,GAAUsC,eAApC,aAA0B,EAAmBX,SACzDiD,GAAW,UAAAxE,GAAeiC,UAAf,eAAmBZ,OAAnB,OAA0BzB,SAA1B,IAA0BA,IAA1B,UAA0BA,GAAUsC,eAApC,aAA0B,EAAmBP,QAE5D,GAAI4C,EACF,OACO,MADC7C,EAEG,eAEA,qBAEN,GAAI8C,EACT,OACO,MADC9C,EAEG,cAEA,qBAEN,GAAI2C,EACT,OAAQ3C,GACN,KAAK,IACH,MAAO,eACT,KAAK,IACH,MAAO,cACT,KAAK,IACH,MAAO,8BAET,KAAK,IACL,KAAK,IACH,MAAO,0BAET,KAAK,IACH,MAAO,yBAET,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,qBAET,KAAK,IACH,MAAO,iCAET,KAAK,IACL,KAAK,IACH,MAAO,eAET,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IAaL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,YAdT,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,8BAET,KAAK,IAaL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,YAbT,KAAK,IACL,KAAK,IACH,MAAO,8BAaT,KAAK,IACH,MAAO,YAET,KAAK,IACH,MAAO,+BAET,KAAK,IACH,MAAO,gBAET,KAAK,IAML,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,gBANT,KAAK,IACH,MAAO,eAOT,KAAK,IACH,MAAO,YAET,KAAK,IACH,MAAO,eAET,KAAK,IACH,MAAO,iBAET,KAAK,IAGL,KAAK,IAEH,MAAO,yBAET,KAAK,IACL,KAAK,IACH,MAAO,oBAET,QACE,MAAO,0BAEN,GAAI4C,EACT,OAAQ5C,GACN,KAAK,IACH,MAAO,eACT,KAAK,IACH,MAAO,cACT,KAAK,IACH,MAAO,8BAET,KAAK,IACL,KAAK,IACH,MAAO,0BAET,KAAK,IACH,MAAO,yBAET,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,qBAET,KAAK,IACH,MAAO,iCAET,KAAK,IACL,KAAK,IACH,MAAO,eAET,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IAaL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,YAdT,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,8BAET,KAAK,IAaL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,YAbT,KAAK,IACL,KAAK,IACH,MAAO,8BAaT,KAAK,IACH,MAAO,YAET,KAAK,IACH,MAAO,+BAET,KAAK,IACH,MAAO,gBAET,KAAK,IAML,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,gBANT,KAAK,IACH,MAAO,eAOT,KAAK,IACH,MAAO,YAET,KAAK,IACH,MAAO,eAET,KAAK,IACH,MAAO,iBAET,KAAK,IAGL,KAAK,IAEH,MAAO,yBAET,KAAK,IACL,KAAK,IACH,MAAO,oBAET,QACE,MAAO,0BAGX,OAAQA,GACN,KAAK,IACH,MAAO,eACT,KAAK,IACH,MAAO,cACT,KAAK,IACH,MAAO,gCAET,KAAK,IACL,KAAK,IACH,MAAO,0BAET,KAAK,IACH,MAAO,2BAET,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,qBAET,KAAK,IACH,MAAO,mCAET,KAAK,IACL,KAAK,IACH,MAAO,eAET,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IAaL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,YAdT,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,gCAET,KAAK,IAaL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,YAbT,KAAK,IACL,KAAK,IACH,MAAO,gCAaT,KAAK,IACH,MAAO,YAET,KAAK,IACH,MAAO,iCAET,KAAK,IACH,MAAO,kBAET,KAAK,IAML,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,kBANT,KAAK,IACH,MAAO,iBAOT,KAAK,IACH,MAAO,YAET,KAAK,IACH,MAAO,eAET,KAAK,IACH,MAAO,mBAGT,KAAK,IAGL,KAAK,IAEH,MAAO,2BAET,KAAK,IACL,KAAK,IACH,MAAO,sBAET,QACE,MAAO,sBAKf,SAAS+C,GAAW/C,GAClB,OAAQA,GACN,KAAK,IACH,MAAO,8BAET,KAAK,IACL,KAAK,IACH,MAAO,0BAET,KAAK,IACH,MAAO,yBAET,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,qBAET,KAAK,IACH,MAAO,iCAET,KAAK,IACL,KAAK,IACH,MAAO,eAET,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IAaL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,YAdT,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,8BAET,KAAK,IAaL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,YAbT,KAAK,IACL,KAAK,IACH,MAAO,8BAaT,KAAK,IACH,MAAO,YAET,KAAK,IACH,MAAO,+BAET,KAAK,IACH,MAAO,gBAET,KAAK,IAML,KAAK,IACL,KAAK,IACL,KAAK,IACH,MAAO,gBANT,KAAK,IACH,MAAO,eAOT,KAAK,IACH,MAAO,YAET,KAAK,IACH,MAAO,eAET,KAAK,IACH,MAAO,iBAET,KAAK,IAGL,KAAK,IAEH,MAAO,yBAET,KAAK,IACL,KAAK,IACH,MAAO,oBAET,QACE,MAAO,sBAIb,SAASgD,GAAgBC,GACvB,OAAIA,GAAS,GAAKA,EAAQ,MACjB,eACEA,GAAS,OAAUA,EAAQ,MAC7B,2BACEA,GAAS,OAAUA,EAAQ,MAC7B,yBACEA,GAAS,OAAUA,EAAQ,MAC7B,0BACEA,GAAS,OAAUA,EAAQ,MAC7B,gBACEA,GAAS,OAAUA,EAAQ,MAC7B,0BACEA,GAAS,OAAUA,EAAQ,MAC7B,wBACEA,GAAS,OAAUA,EAAQ,MAC7B,2BACEA,GAAS,OAAUA,GAAS,EAC9B,eACK,oBAGhB,SAASC,GAAaD,GACpB,OAAIA,GAAS,GAAKA,EAAQ,MACjB,WACEA,GAAS,OAAUA,EAAQ,MAC7B,kBACEA,GAAS,OAAUA,EAAQ,MAC7B,gBACEA,GAAS,OAAUA,EAAQ,MAC7B,iBACEA,GAAS,OAAUA,EAAQ,MAC7B,YACEA,GAAS,OAAUA,EAAQ,MAC7B,iBACEA,GAAS,OAAUA,EAAQ,MAC7B,eACEA,GAAS,OAAUA,EAAQ,MAC7B,kBACEA,GAAS,OAAUA,GAAS,EAC9B,WACK,GAGhB,SAASE,GAAcC,GACrB,OAAQA,GACN,KAAK,EACL,KAAK,EACH,MAAO,iBAET,KAAK,EACH,MAAO,iBAET,KAAK,EACH,MAAO,iBAET,KAAK,EACH,MAAO,iBAET,KAAK,EACH,MAAO,iBAET,KAAK,EACH,MAAO,iBAET,KAAK,EACH,MAAO,iBAET,KAAK,EACH,MAAO,iBAET,KAAK,EACH,MAAO,iBAET,KAAK,GACH,MAAO,kBAET,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACH,MAAO,kBAET,QACE,MAAO,qBAIb,SAASC,GAAWD,GAClB,OAAQA,GACN,KAAK,EACL,KAAK,EACH,MAAO,UAET,KAAK,EACH,MAAO,UAET,KAAK,EACH,MAAO,eAET,KAAK,EACH,MAAO,eAET,KAAK,EACH,MAAO,eAET,KAAK,EACH,MAAO,WAET,KAAK,EACH,MAAO,WAET,KAAK,EACH,MAAO,gBAET,KAAK,EACH,MAAO,gBAET,KAAK,GACH,MAAO,iBAET,KAAK,GACH,MAAO,eAET,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACH,MAAO,gBAET,QACE,MAAO,qBAIb,SAASE,GAAgBC,GACvB,OAAQA,GACN,KAAK,EACL,KAAK,EACH,MAAO,sBAET,KAAK,EACH,MAAO,sBAET,KAAK,EACH,MAAO,sBAET,KAAK,EACH,MAAO,sBAET,KAAK,EACH,MAAO,sBAET,KAAK,EACH,MAAO,sBAET,KAAK,EACH,MAAO,sBAET,KAAK,EACH,MAAO,sBAET,KAAK,EACH,MAAO,sBAET,KAAK,GACH,MAAO,uBAET,KAAK,GACH,MAAO,uBAET,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACH,MAAO,uBAET,QACE,MAAO,qBAUb,OANA/E,EAAAA,EAAAA,YAAU,WACRpB,EAAKoG,KACAC,SAASC,MAAT,oBAA8BtG,EAAKoG,MACnCC,SAASC,MAAQ,YACrB,CAACtG,EAAKoG,QAGP,SAAC,IAAD,CAAKhJ,GAAI,CAAEmJ,GAAI,IAAf,UACE,UAAC,IAAD,CAAWC,SAAS,KAApB,UACIxG,EAAKyG,KAQH,MAPF,SAAC,IAAD,CACErI,QAAQ,KACRsI,UAAU,MACVtJ,GAAsB,CAAEuJ,UAAW,UAHrC,UAKE,yDAGJ,UAAC,IAAD,CACEvJ,GAAI,CAAEmJ,GAAI,GACVlH,QAAQ,OACRE,eAAe,SACfD,WAAW,SAJb,WAME,SAAC,IAAD,WACE,SAAC,IAAD,CACEsH,QAlmCQ,WAClBC,UAAUC,YAAYC,oBAAmB,SAACrI,GACxCiC,GAAOjC,EAASsI,OAAOC,UACvBpG,GAAOnC,EAASsI,OAAOE,cAErBL,UAAUC,aACZD,UAAUC,YAAYC,oBAAmB,SAACrI,GACxCiC,GAAOjC,EAASsI,OAAOC,UACvBpG,GAAOnC,EAASsI,OAAOE,WACvB,IAAMC,EAAM,UAAM9K,EAAN,wBAA4BqC,EAASsI,OAAOC,SAA5C,gBAA4DvI,EAASsI,OAAOE,UAA5E,kBAA+F/K,GAC3GgG,IAAAA,IACOgF,GACJ/E,MAAK,SAACC,GACLpC,EAAQoC,EAASrC,MAEjBiB,GAAUoB,EAASrC,KAAKoH,KAAKC,QAG9BhE,OAAM,SAAC/C,GACNC,IAAS,GACTE,IAAQ,GACR6C,QAAQhD,MAAM,wBAAsBA,MAExCC,IAAS,GACTJ,EAAY,QA2kCN7C,MAAM,UACNgK,KAAK,QACLhB,MAAM,cAJR,UAME,SAAC,IAAD,CAAcjI,MAAO,CAAEhB,SAAU,WAGrC,UAACoB,EAAD,YACE,SAACU,EAAD,WACE,SAAC,IAAD,OAEF,SAACK,EAAD,CACE+H,YAAY,SACZC,WAAY,CAAE,aAAc,UAC5BC,MAAOvH,EACPwH,SAAU,SAAC1F,GAAD,OAAW7B,EAAY6B,EAAM2F,OAAOF,QAC9CG,WAvhCW,SAAC5F,GACtB,IAAM6F,EAAG,UAAMxL,EAAN,sBAA0B6D,EAA1B,kBAA4C/D,GACnC,UAAd6F,EAAM8F,MACR3F,IAAAA,IACO0F,GACJzF,MAAK,SAACC,GACL1B,GAAO0B,EAASrC,KAAK+H,MAAMrH,KAC3BG,GAAOwB,EAASrC,KAAK+H,MAAMnH,KAG3BK,GAAUoB,EAASrC,KAAKoH,KAAKC,KAC7BpH,EAAQoC,EAASrC,SAIlBqD,OAAM,SAAC/C,GACNC,IAAS,GACTE,IAAQ,GACR6C,QAAQhD,MAAM,wBAAsBA,MAExCC,IAAS,GACTJ,EAAY,YAqgCR,SAAC,IAAD,UACGG,IACC,SAAC,IAAD,CACEE,KAAMA,GACNwH,iBAAkB,IAClBC,QAAS1E,GAHX,UAKE,SAACtF,EAAD,CACEgK,QAAS1E,GACT2E,SAAS,QACT9K,GAAI,CAAE4B,MAAO,QAHf,uCAQA,WAGR,mBACA,kBAECgB,EAAKyG,MACJ,UAAC,IAAD,YACE,SAAC,IAAD,CACErI,QAAQ,KACRsI,UAAU,MACVtJ,GACoB,CAAEuJ,UAAW,SAAUwB,WAAY,SAEvD7K,MAAM,gBANR,SAQGqG,MAEH,mBACA,mBACA,UAAC,KAAD,CACEyE,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SAJb,WAME,SAAC,KAAD,CACEgJ,MAAI,EACJC,GAAI,GACJC,GAAI,EACJpL,GAAsB,CAAEuJ,UAAW,UAJrC,UAME,SAAC,IAAD,CAAKvJ,GAAI,CAAEiC,QAAS,CAAEkJ,GAAI,OAAQC,GAAI,UAAtC,SACGpI,GACC,SAAC,IAAD,CACEwG,QAAS,kBAAMvG,GAAW,SAACoI,GAAD,OAAWA,MACrCnL,MAAM,UACNgK,KAAK,QACLhB,MAAM,kBAJR,UAME,SAAC,IAAD,CAAQjI,MAAOA,EAAOhB,SAAS,UAAUC,MAAM,UAA/C,UACE,uCAIJ,SAAC,IAAD,CACEsJ,QAAS,kBAAMvG,GAAW,SAACoI,GAAD,OAAWA,MACrCnL,MAAM,UACNgK,KAAK,QACLhB,MAAM,kBAJR,UAME,SAAC,IAAD,CAAQjI,MAAOA,EAAOhB,SAAS,UAAUC,MAAM,UAA/C,UACE,2CAMV,SAAC,KAAD,CACEgL,MAAI,EACJC,GAAI,GACJC,GAAI,EACJpL,GAAsB,CAAEuJ,UAAW,UAJrC,UAME,UAAC,IAAD,YACE,UAAC,IAAD,YACE,SAAC,IAAD,UACG3G,EAAKyG,MACJ,SAAC,KAAD,CACE2B,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SAJb,UAME,SAAC,IAAD,CAAKlC,GAAI,CAAE4B,MAAO,OAAQR,OAAQ,QAAlC,UACE,gBACEkK,IAAI,OACJC,IAAG,UA/2ChBvM,8DA+2CgB,sBAAiB4D,EAAK4I,WAAtB,aAAiB,EAAUC,QAA3B,QACH7J,MAAM,OACNR,OAAO,OACP8H,MAAK,UAAEtG,EAAK4I,WAAP,aAAE,EAAUC,QACjBC,WAAW,EACXC,MAAM,eAIV,QAEN,SAAC,IAAD,CACE3K,QAAQ,KACRsI,UAAU,MACVtJ,GAAI,CAAE4L,SAAU,EAAGrC,UAAW,UAHhC,UAKE,SAAC,IAAD,CAAKvJ,GAAI,CAAE6L,cAAe,GAA1B,UACE,uBAAIjJ,EAAKoG,KAAK8C,qBAGlB,SAAC,IAAD,CACE9K,QAAQ,KACRsI,UAAU,MACVtJ,GAAI,CACF4L,SAAU,EACVrC,UAAW,SACXwB,WAAY,WAEd7K,MAAM,gBARR,UAUE,SAAC,IAAD,CAAKF,GAAI,CAAE6L,cAAe,GAA1B,SACGjJ,EAAK2C,QAAQ,GAAGwG,YAAYD,sBAOnC,mBACA,UAAC,KAAD,CACEd,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SAJb,WAME,SAAC,IAAD,CACElB,QAAQ,KACRsI,UAAU,MACVtJ,GAAsB,CAAEuJ,UAAW,UAHrC,SAKGvG,GACC,gCAAGJ,EAAKyG,KAAK/D,KAAK0G,UAAY,IAA9B,WAEA,iCAEwC,GAAlCpJ,EAAKyG,KAAK/D,KAAK0G,UAAY,KAAY,EACzC,IACAA,UAJJ,aASJ,SAAC,IAAD,CAAKhM,GAAI,CAAEiM,IAAK,GAAIC,IAAK,IAAzB,UACE,gBACEX,IAAG,UAAKrM,GAAL,OAAuB2I,GAAiB,OACzCnE,SADyC,IACzCA,IADyC,UACzCA,GAAUsC,eAD+B,iBACzC,EAAmBT,QAAQ,UADc,aACzC,EAA+BC,KAEjC8F,IAAI,UACJlK,OAAO,MACPQ,MAAM,MACN8J,WAAW,EACXC,MAAM,iBAIZ,SAAC,IAAD,CACE3K,QAAQ,KACRsI,UAAU,MACVtJ,GAAI,CACF4L,SAAU,EACVrC,UAAW,SACXwB,WAAY,WAEd7K,MAAM,gBARR,UAUE,SAAC,IAAD,WACE,6CACa,IACV8C,GACC,gCAAGJ,EAAKyG,KAAK8C,WAAWH,UAAY,IAApC,WAEA,iCAE8C,GAAxCpJ,EAAKyG,KAAK8C,WAAWH,UAAY,KAAY,EAC/C,IACAA,UAJJ,uBAaZ,SAAC,KAAD,CACEd,MAAI,EACJC,GAAI,GACJC,GAAI,EACJpL,GAAsB,CAAEuJ,UAAW,UAJrC,UAME,SAAC,IAAD,CAAKvJ,GAAI,CAAEiC,QAAS,CAAEkJ,GAAI,OAAQC,GAAI,kBAe1C,UAAC,IAAD,CAAKpL,GAAI,CAAEiC,QAAS,CAAEkJ,GAAI,QAASC,GAAI,SAAvC,WACE,UAAC,IAAD,CAAOjJ,eAAe,SAAS8I,UAAU,MAAMxK,QAAS,EAAxD,UACGuC,GACC,SAAC,IAAD,CACEwG,QAAS,kBAAMvG,GAAW,SAACoI,GAAD,OAAWA,MACrCnL,MAAM,UACNgK,KAAK,QACLhB,MAAM,kBAJR,UAME,SAAC,IAAD,CAAQjI,MAAOA,EAAOhB,SAAS,UAAUC,MAAM,UAA/C,UACE,uCAIJ,SAAC,IAAD,CACEsJ,QAAS,kBAAMvG,GAAW,SAACoI,GAAD,OAAWA,MACrCnL,MAAM,UACNgK,KAAK,QACLhB,MAAM,kBAJR,UAME,SAAC,IAAD,CAAQjI,MAAOA,EAAOhB,SAAS,UAAUC,MAAM,UAA/C,UACE,uCAIN,SAAC,IAAD,CAAYsJ,QArtCR,WAChB3G,EAAQ,KAotCoC3C,MAAM,UAAUgJ,MAAM,QAAtD,UACE,SAAC,IAAD,CAAWjI,MAAO,CAAEhB,SAAU,YAGlC,sBAEF,mBACA,mBACA,SAAC,IAAD,CAASD,GAAI,CAAEoM,kBAAmB,EAAGxK,MAAO,WAC5C,mBACA,SAAC,IAAD,CAAK5B,GAAI,CAAEiC,QAAS,CAAEkJ,GAAI,OAAQC,GAAI,UAAtC,UACE,UAAC,KAAD,CACEJ,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SACXqH,UAAU,SACV8C,QAAS,GANX,WAQE,SAAC,KAAD,CAAMnB,MAAI,EAACC,GAAI,EAAf,UACE,UAAC,KAAD,CACEH,WAAS,EACTC,UAAU,SACV9I,eAAe,SACfD,WAAW,SACXqH,UAAU,SALZ,WAOE,UAAC,KAAD,CACEyB,WAAS,EACTC,UAAU,MACV9I,eAAe,OACfD,WAAW,SACXqH,UAAU,SALZ,WAOE,gBACEgC,IAAG,UAAKpM,EAAL,YAA4B2J,IAC5BlG,EAAKoH,KAAKjB,MAAMiD,YAEnBV,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,YAER,UAAC,IAAD,CAAY3K,QAAQ,IAAId,MAAM,gBAA9B,iBACS0C,EAAKoH,KAAKjB,MAAMiD,UADzB,QACyC,IACtCvE,GAAa7E,EAAKoH,KAAKC,QACZ,KACd,gBACEsB,IAAG,UAAKrM,EAAL,gBACHoM,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,SACN1K,MAAO,CAAEV,UAAU,UAAD,OAAYqD,GAAS,IAArB,cAItB,UAAC,KAAD,CACEoH,WAAS,EACTC,UAAU,MACV9I,eAAe,OACfD,WAAW,SACXqH,UAAU,SALZ,WAOE,gBACEgC,IAAG,UAAKrM,EAAL,kBACHoM,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,YAGR,SAAC,IAAD,CAAY3K,QAAQ,IAAId,MAAM,gBAA9B,SACG0C,EAAKyG,MAAO,uCAASzG,EAAKyG,KAAKiD,SAAnB,UAAsC,WAIvD,UAAC,KAAD,CACEtB,WAAS,EACTC,UAAU,MACV9I,eAAe,OACfD,WAAW,SACXqH,UAAU,SALZ,WAOE,gBACEgC,IAAG,UAAKpM,EAAL,kBACHmM,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,YAER,SAAC,IAAD,CAAY3K,QAAQ,IAAId,MAAM,gBAA9B,SACG0C,EAAKyG,MAAO,uCAASzG,EAAKyG,KAAKkD,SAAnB,QAAoC,gBAMzD,SAAC,KAAD,CAAMrB,MAAI,EAACC,GAAI,GAAf,UACE,UAAC,IAAD,CAIEqB,mBAAoB,EACpBC,cAAe,EACfC,YAAa,EANf,WAQE,UAAC,KAAD,CACE1B,WAAS,EACTC,UAAU,SACV9I,eAAe,SACfD,WAAW,SAJb,WAME,SAAC,IAAD,CACElB,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,WAHpB,kBAOA,gBACEQ,IAAG,UAAKrM,GAAL,OAAuB2I,GAAiB,OACzCnE,SADyC,IACzCA,IADyC,UACzCA,GAAUsC,eAD+B,iBACzC,EAAmBT,QAAQ,UADc,aACzC,EAA+BC,KAEjC8F,IAAI,UACJlK,OAAO,MACPQ,MAAM,MACN8J,WAAW,EACXC,MAAM,YAGR,SAAC,IAAD,CAAY3K,QAAQ,KAApB,SACGgC,GACC,yBAAIU,GAASgC,OAAO,GAAGJ,KAAK0G,UAAY,IAAxC,WAEA,0BAEiD,GAA3CtI,GAASgC,OAAO,GAAGJ,KAAK0G,UAAY,KACpC,EACF,IACAA,UALJ,eAWL,CACC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACtD,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACxCW,KAAI,SAAC5G,GAAD,6BACJ,UAAC,KAAD,CACEiF,WAAS,EACTC,UAAU,SACV9I,eAAe,SACfD,WAAW,SAJb,WAOE,SAAC,IAAD,CACElB,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,WAHpB,UAKE,8BAAG7D,GAAgBnB,EAAGrC,GAASyD,eAEjC,gBACEoE,IAAG,UAAKrM,GAAL,OAAuBgJ,GAAgB,UACxCpE,GAAeiC,UADyB,iBACxC,EAAmBR,QAAQ,UADa,aACxC,EAA+BC,GAC/BO,IAEFuF,IAAI,UACJlK,OAAO,MACPQ,MAAM,MACN8J,WAAW,EACXC,MAAM,YAGR,SAAC,IAAD,CACExJ,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAHX,UAKE,UAAC,IAAD,CAAYO,QAAQ,KAApB,UAC+B,OAA5B,UAAA8C,GAAeiC,UAAf,eAAmBT,OAClB,SAAC,IAAD,CACEtE,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,WAHpB,qBAOE,KACyB,OAA5B,UAAAjH,GAAeiC,UAAf,eAAmBT,OAClB,SAAC,IAAD,CACEtE,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,WAHpB,oBAOE,MACH,UAAAjH,GAAeiC,UAAf,eAAmBT,MAAO,KACzB,8BACGtC,GACC,0BACG,UAAAc,GAAeiC,UAAf,mBAAmBT,YAAnB,eAAyB0G,WAAY,IADxC,WAIA,0BAIM,IAFA,UAAAlI,GAAeiC,UAAf,mBAAmBT,YAAnB,eAAyB0G,WACzB,KAEA,EACF,IACAA,UAPJ,YAYF,YAhEHlI,GAAeiC,GAAGZ,kBAyEnC,mBACA,SAAC,IAAD,CAASnF,GAAI,CAAEoM,kBAAmB,EAAGxK,MAAO,WAC5C,UAAC,IAAD,YACE,UAACxC,EAAD,CACEoF,SAAuB,WAAbA,GACV8F,SAAU5F,GAAa,UAFzB,WAIE,SAAC5E,EAAD,CACE,gBAAc,kBACd0F,GAAG,iBAFL,UAIE,UAAC,KAAD,CACEwF,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SACXmK,QAAS,EALX,WAOE,SAAC,KAAD,CAAMnB,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CAAKnL,GAAI,CAAEiM,GAAI,GAAf,UACE,UAAC,KAAD,CACEjB,WAAS,EACTC,UAAU,SACV9I,eAAe,SACfD,WAAW,OAJb,WAME,SAAC,KAAD,CAAMgJ,MAAI,EAAV,UACE,SAAC,IAAD,CAAYlK,QAAQ,KAAKd,MAAM,cAA/B,UACE,sCAGJ,SAAC,KAAD,CAAMgL,MAAI,EAAV,UACE,SAAC,IAAD,CACElK,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,UAKE,8BAAGjE,GAAgB,iBAM7B,SAAC,KAAD,CAAMoE,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,gBACE8K,IAAG,UAAKrM,GAAL,OAAuBqJ,GAAU,OAClC7E,SADkC,IAClCA,IADkC,UAClCA,GAAU0B,MAAM,UADkB,iBAClC,EAAoBG,QAAQ,UADM,aAClC,EAAgCC,KAElC8F,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,gBAIZ,SAAC,KAAD,CAAMT,MAAI,EAACC,GAAI,EAAf,UACE,UAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,WAME,SAAC,IAAD,CAAYO,QAAQ,KAApB,SACGgC,GACC,yBAAIU,GAAS0B,MAAM,GAAGE,KAAKsB,IAAIoF,UAAY,IAA3C,WAEA,0BAGM,GADAtI,GAAS0B,MAAM,GAAGE,KAAKsB,IAAIoF,UAAY,KAEvC,EACF,IACAA,UANJ,aAWJ,SAAC,IAAD,CAAYhL,QAAQ,KAAKd,MAAM,gBAA/B,SACG8C,GACC,yBACGU,GAAS0B,MAAM,GAAGE,KAAKsH,MAAMZ,UAAY,IAD5C,WAIA,0BAIM,GAFAtI,GAAS0B,MAAM,GAAGE,KAAKsH,MAAMZ,UAC7B,KAEA,EACF,IACAA,UAPJ,uBAgBZ,UAACtL,EAAD,YACE,UAAC,KAAD,CACEsK,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SACXmK,QAAS,EACTrM,GAAI,CAAE6M,GAAI,EAAGzL,OAAQ,QANvB,WAQE,SAAC,KAAD,CAAM8J,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,6BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,UAME,gBACE8K,IAAG,UAAKpM,EAAL,YAA4B2J,IAC5BpF,GAAS0B,MAAM,GAAG0H,WAAWd,YAEhCV,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,gBAIZ,SAAC,KAAD,CAAMT,MAAI,EAACC,GAAI,EAAf,UACE,UAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,OACf8I,UAAU,MACVxK,QAAS,EAJX,WAME,UAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,UAOGrH,GAAS0B,MAAM,GAAG0H,WAAWd,UAPhC,QAOgD,IAC7CvE,GAAa/D,GAAS0B,MAAM,GAAG2H,cAElC,gBACExB,IAAG,UAAKrM,EAAL,gBACHoM,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,SACN1K,MAAO,CACLV,UAAU,UAAD,OACPmD,GAAS0B,MAAM,GAAG2H,SAAW,IADtB,gBAQjB,SAAC,KAAD,CAAM7B,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,0BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CAAYO,QAAQ,KAApB,SACGgC,GACC,yBACGU,GAAS0B,MAAM,GAAGE,KAAK0H,KAAKhB,UAAY,IAD3C,WAIA,0BAGM,GADAtI,GAAS0B,MAAM,GAAGE,KAAK0H,KAAKhB,UAAY,KAExC,EACF,IACAA,UANJ,oBAcV,UAAC,KAAD,CACEhB,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SACXmK,QAAS,EACTrM,GAAI,CAAE6M,GAAI,EAAGzL,OAAQ,QANvB,WAQE,SAAC,KAAD,CAAM8J,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,2BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,UAME,gBACE8K,IAAG,UAAKrM,EAAL,kBACHoM,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,gBAIZ,SAAC,KAAD,CAAMT,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,OACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,UAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,UAKGrH,GAAS0B,MAAM,GAAGkH,SALrB,eAUJ,SAAC,KAAD,CAAMpB,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,sBASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CAAYO,QAAQ,KAApB,SACGgC,GACC,yBAAIU,GAAS0B,MAAM,GAAGE,KAAKsB,IAAIoF,UAAY,IAA3C,WAEA,0BAGM,GADAtI,GAAS0B,MAAM,GAAGE,KAAKsB,IAAIoF,UAAY,KAEvC,EACF,IACAA,UANJ,oBAcV,UAAC,KAAD,CACEhB,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SACXmK,QAAS,EACTrM,GAAI,CAAE6M,GAAI,EAAGzL,OAAQ,QANvB,WAQE,SAAC,KAAD,CAAM8J,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,2BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,UAME,gBACE8K,IAAG,UAAKpM,EAAL,kBACHmM,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,gBAIZ,SAAC,KAAD,CAAMT,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,OACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,UAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,UAKGrH,GAAS0B,MAAM,GAAGmH,SALrB,aASJ,SAAC,KAAD,CAAMrB,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,0BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CAAYO,QAAQ,KAApB,SACGgC,GACC,yBAAIU,GAAS0B,MAAM,GAAGE,KAAK2H,IAAIjB,UAAY,IAA3C,WAEA,0BAGM,GADAtI,GAAS0B,MAAM,GAAGE,KAAK2H,IAAIjB,UAAY,KAEvC,EACF,IACAA,UANJ,oBAcV,UAAC,KAAD,CACEhB,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SACXmK,QAAS,EACTrM,GAAI,CAAE6M,GAAI,EAAGzL,OAAQ,QANvB,WAQE,SAAC,KAAD,CAAM8J,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,2BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,UAME,gBACE8K,IAAG,UAAKrM,EAAL,YAAwByJ,IACxBjF,GAAS0B,MAAM,GAAG8H,IAAIlB,YAEzBV,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,gBAIZ,SAAC,KAAD,CAAMT,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,OACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,SAKGlC,IAAYnF,GAAS0B,MAAM,GAAG8H,IAAIlB,kBAIzC,SAAC,KAAD,CAAMd,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,wBASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CAAYO,QAAQ,KAApB,SACGgC,GACC,yBACGU,GAAS0B,MAAM,GAAGE,KAAKsH,MAAMZ,UAAY,IAD5C,WAIA,0BAIM,GAFAtI,GAAS0B,MAAM,GAAGE,KAAKsH,MAAMZ,UAC7B,KAEA,EACF,IACAA,UAPJ,oBAeV,UAAC,KAAD,CACEhB,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SACXmK,QAAS,EACTrM,GAAI,CAAE6M,GAAI,EAAGzL,OAAQ,QANvB,WAQE,SAAC,KAAD,CAAM8J,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,6BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,UAME,gBACE8K,IAAG,UAAKpM,EAAL,YAA4BqJ,GAC7B9E,GAAS0B,MAAM,GAAG+H,aAEpB7B,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,gBAIZ,SAAC,KAAD,CAAMT,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,OACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,SAKGrC,GAAahF,GAAS0B,MAAM,GAAG+H,mBAItC,SAAC,KAAD,CAAMjC,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,QAEjB,UAAC,KAAD,CACEH,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SACXmK,QAAS,EACTrM,GAAI,CAAE6M,GAAI,GANZ,WAQE,SAAC,KAAD,CAAM3B,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SAEf8I,UAAU,SACVxK,QAAS,EALX,UAOE,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,0BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,UAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,WAME,SAAC,IAAD,CAAKT,GAAI,CAAEoN,IAAK,GAAhB,UACE,gBACE7B,IAAG,UAAKrM,EAAL,gBACHoM,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,cAGV,SAAC,IAAD,CACE3K,QAAQ,IACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,UAHpB,SAKGxD,GACC7D,GAAS0B,MAAM,GAAGC,QAClB3B,GAASyD,kBAKjB,SAAC,KAAD,CAAM+D,MAAI,EAACC,GAAI,EAAf,UACE,UAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,WAME,SAAC,IAAD,CAAKT,GAAI,CAAEoN,IAAK,GAAhB,UACE,gBACE7B,IAAG,UAAKrM,EAAL,eACHoM,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,cAGV,SAAC,IAAD,CACE3K,QAAQ,IACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,UAHpB,SAKGxD,GACC7D,GAAS0B,MAAM,GAAGK,OAClB/B,GAASyD,kBAKjB,SAAC,KAAD,CAAM+D,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SAEf8I,UAAU,SACVxK,QAAS,EALX,UAOE,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,yBASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,QAEjB,UAAC,KAAD,CACEH,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SACXmK,QAAS,EACTrM,GAAI,CAAE6M,GAAI,GANZ,WAQE,SAAC,KAAD,CAAM3B,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,2BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,UAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,WAME,SAAC,IAAD,CAAKT,GAAI,CAAEoN,IAAK,GAAhB,UACE,gBACE7B,IAAG,UAAKrM,EAAL,iBACHoM,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,cAGV,SAAC,IAAD,CACE3K,QAAQ,IACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,UAHpB,SAKGxD,GACC7D,GAAS0B,MAAM,GAAGiI,SAClB3J,GAASyD,kBAKjB,SAAC,KAAD,CAAM+D,MAAI,EAACC,GAAI,EAAf,UACE,UAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,WAME,SAAC,IAAD,CAAKT,GAAI,CAAEoN,IAAK,GAAhB,UACE,gBACE7B,IAAG,UAAKrM,EAAL,gBACHoM,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,cAGV,SAAC,IAAD,CACE3K,QAAQ,IACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,UAHpB,SAKGxD,GACC7D,GAAS0B,MAAM,GAAGkI,QAClB5J,GAASyD,kBAKjB,SAAC,KAAD,CAAM+D,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SAEf8I,UAAU,SACVxK,QAAS,EALX,UAOE,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,0BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,cAIrB,UAAC/L,EAAD,CACEoF,SAAuB,WAAbA,GACV8F,SAAU5F,GAAa,UAFzB,WAIE,SAAC5E,EAAD,CACE,gBAAc,kBACd0F,GAAG,iBAFL,UAIE,UAAC,KAAD,CACEwF,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SACXmK,QAAS,EALX,WAOE,SAAC,KAAD,CAAMnB,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CAAKnL,GAAI,CAAEiM,GAAI,GAAf,UACE,UAAC,KAAD,CACEjB,WAAS,EACTC,UAAU,SACV9I,eAAe,SACfD,WAAW,OAJb,WAME,SAAC,KAAD,CAAMgJ,MAAI,EAAV,UACE,SAAC,IAAD,CAAYlK,QAAQ,KAAKd,MAAM,cAA/B,UACE,yCAGJ,SAAC,KAAD,CAAMgL,MAAI,EAAV,UACE,SAAC,IAAD,CACElK,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,UAKE,8BAAGjE,GAAgB,iBAM7B,SAAC,KAAD,CAAMoE,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,gBACE8K,IAAG,UAAKrM,GAAL,OAAuBqJ,GAAU,OAClC7E,SADkC,IAClCA,IADkC,UAClCA,GAAU0B,MAAM,UADkB,iBAClC,EAAoBG,QAAQ,UADM,aAClC,EAAgCC,KAElC8F,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,gBAIZ,SAAC,KAAD,CAAMT,MAAI,EAACC,GAAI,EAAf,UACE,UAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,WAME,SAAC,IAAD,CAAYO,QAAQ,KAApB,SACGgC,GACC,yBAAIU,GAAS0B,MAAM,GAAGE,KAAKsB,IAAIoF,UAAY,IAA3C,WAEA,0BAGM,GADAtI,GAAS0B,MAAM,GAAGE,KAAKsB,IAAIoF,UAAY,KAEvC,EACF,IACAA,UANJ,aAWJ,SAAC,IAAD,CAAYhL,QAAQ,KAAKd,MAAM,gBAA/B,SACG8C,GACC,yBACGU,GAAS0B,MAAM,GAAGE,KAAKsH,MAAMZ,UAAY,IAD5C,WAIA,0BAIM,GAFAtI,GAAS0B,MAAM,GAAGE,KAAKsH,MAAMZ,UAC7B,KAEA,EACF,IACAA,UAPJ,uBAgBZ,UAACtL,EAAD,YACE,UAAC,KAAD,CACEsK,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SACXmK,QAAS,EACTrM,GAAI,CAAE6M,GAAI,EAAGzL,OAAQ,QANvB,WAQE,SAAC,KAAD,CAAM8J,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,6BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,UAME,gBACE8K,IAAG,UAAKpM,EAAL,YAA4B2J,IAC5BpF,GAAS0B,MAAM,GAAG0H,WAAWd,YAEhCV,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,gBAIZ,SAAC,KAAD,CAAMT,MAAI,EAACC,GAAI,EAAf,UACE,UAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,OACf8I,UAAU,MACVxK,QAAS,EAJX,WAME,UAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,UAOGrH,GAAS0B,MAAM,GAAG0H,WAAWd,UAPhC,QAOgD,IAC7CvE,GAAa/D,GAAS0B,MAAM,GAAG2H,cAElC,gBACExB,IAAG,UAAKrM,EAAL,gBACHoM,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,SACN1K,MAAO,CACLV,UAAU,UAAD,OACPmD,GAAS0B,MAAM,GAAG2H,SAAW,IADtB,gBAQjB,SAAC,KAAD,CAAM7B,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,0BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CAAYO,QAAQ,KAApB,SACGgC,GACC,yBACGU,GAAS0B,MAAM,GAAGE,KAAK0H,KAAKhB,UAAY,IAD3C,WAIA,0BAGM,GADAtI,GAAS0B,MAAM,GAAGE,KAAK0H,KAAKhB,UAAY,KAExC,EACF,IACAA,UANJ,oBAcV,UAAC,KAAD,CACEhB,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SACXmK,QAAS,EACTrM,GAAI,CAAE6M,GAAI,EAAGzL,OAAQ,QANvB,WAQE,SAAC,KAAD,CAAM8J,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,2BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,UAME,gBACE8K,IAAG,UAAKrM,EAAL,kBACHoM,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,gBAIZ,SAAC,KAAD,CAAMT,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,OACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,UAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,UAKGrH,GAAS0B,MAAM,GAAGkH,SALrB,eAUJ,SAAC,KAAD,CAAMpB,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,sBASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CAAYO,QAAQ,KAApB,SACGgC,GACC,yBAAIU,GAAS0B,MAAM,GAAGE,KAAKsB,IAAIoF,UAAY,IAA3C,WAEA,0BAGM,GADAtI,GAAS0B,MAAM,GAAGE,KAAKsB,IAAIoF,UAAY,KAEvC,EACF,IACAA,UANJ,oBAcV,UAAC,KAAD,CACEhB,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SACXmK,QAAS,EACTrM,GAAI,CAAE6M,GAAI,EAAGzL,OAAQ,QANvB,WAQE,SAAC,KAAD,CAAM8J,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,2BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,UAME,gBACE8K,IAAG,UAAKpM,EAAL,kBACHmM,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,gBAIZ,SAAC,KAAD,CAAMT,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,OACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,UAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,UAKGrH,GAAS0B,MAAM,GAAGmH,SALrB,aASJ,SAAC,KAAD,CAAMrB,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,0BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CAAYO,QAAQ,KAApB,SACGgC,GACC,yBAAIU,GAAS0B,MAAM,GAAGE,KAAK2H,IAAIjB,UAAY,IAA3C,WAEA,0BAGM,GADAtI,GAAS0B,MAAM,GAAGE,KAAK2H,IAAIjB,UAAY,KAEvC,EACF,IACAA,UANJ,oBAcV,UAAC,KAAD,CACEhB,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SACXmK,QAAS,EACTrM,GAAI,CAAE6M,GAAI,EAAGzL,OAAQ,QANvB,WAQE,SAAC,KAAD,CAAM8J,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,2BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,UAME,gBACE8K,IAAG,UAAKrM,EAAL,YAAwByJ,IACxBjF,GAAS0B,MAAM,GAAG8H,IAAIlB,YAEzBV,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,gBAIZ,SAAC,KAAD,CAAMT,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,OACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,SAKGlC,IAAYnF,GAAS0B,MAAM,GAAG8H,IAAIlB,kBAIzC,SAAC,KAAD,CAAMd,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,wBASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CAAYO,QAAQ,KAApB,SACGgC,GACC,yBACGU,GAAS0B,MAAM,GAAGE,KAAKsH,MAAMZ,UAAY,IAD5C,WAIA,0BAIM,GAFAtI,GAAS0B,MAAM,GAAGE,KAAKsH,MAAMZ,UAC7B,KAEA,EACF,IACAA,UAPJ,oBAeV,UAAC,KAAD,CACEhB,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SACXmK,QAAS,EACTrM,GAAI,CAAE6M,GAAI,EAAGzL,OAAQ,QANvB,WAQE,SAAC,KAAD,CAAM8J,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,6BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,UAME,gBACE8K,IAAG,UAAKpM,EAAL,YAA4BqJ,GAC7B9E,GAAS0B,MAAM,GAAG+H,aAEpB7B,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,gBAIZ,SAAC,KAAD,CAAMT,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,OACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,SAKGrC,GAAahF,GAAS0B,MAAM,GAAG+H,mBAItC,SAAC,KAAD,CAAMjC,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,QAEjB,UAAC,KAAD,CACEH,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SACXmK,QAAS,EACTrM,GAAI,CAAE6M,GAAI,GANZ,WAQE,SAAC,KAAD,CAAM3B,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SAEf8I,UAAU,SACVxK,QAAS,EALX,UAOE,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,0BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,UAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,WAME,SAAC,IAAD,CAAKT,GAAI,CAAEoN,IAAK,GAAhB,UACE,gBACE7B,IAAG,UAAKrM,EAAL,gBACHoM,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,cAGV,SAAC,IAAD,CACE3K,QAAQ,IACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,UAHpB,SAKGxD,GACC7D,GAAS0B,MAAM,GAAGC,QAClB3B,GAASyD,kBAKjB,SAAC,KAAD,CAAM+D,MAAI,EAACC,GAAI,EAAf,UACE,UAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,WAME,SAAC,IAAD,CAAKT,GAAI,CAAEoN,IAAK,GAAhB,UACE,gBACE7B,IAAG,UAAKrM,EAAL,eACHoM,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,cAGV,SAAC,IAAD,CACE3K,QAAQ,IACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,UAHpB,SAKGxD,GACC7D,GAAS0B,MAAM,GAAGK,OAClB/B,GAASyD,kBAKjB,SAAC,KAAD,CAAM+D,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SAEf8I,UAAU,SACVxK,QAAS,EALX,UAOE,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,yBASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,QAEjB,UAAC,KAAD,CACEH,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SACXmK,QAAS,EACTrM,GAAI,CAAE6M,GAAI,GANZ,WAQE,SAAC,KAAD,CAAM3B,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,2BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,UAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,WAME,SAAC,IAAD,CAAKT,GAAI,CAAEoN,IAAK,GAAhB,UACE,gBACE7B,IAAG,UAAKrM,EAAL,iBACHoM,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,cAGV,SAAC,IAAD,CACE3K,QAAQ,IACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,UAHpB,SAKGxD,GACC7D,GAAS0B,MAAM,GAAGiI,SAClB3J,GAASyD,kBAKjB,SAAC,KAAD,CAAM+D,MAAI,EAACC,GAAI,EAAf,UACE,UAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,WAME,SAAC,IAAD,CAAKT,GAAI,CAAEoN,IAAK,GAAhB,UACE,gBACE7B,IAAG,UAAKrM,EAAL,gBACHoM,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,cAGV,SAAC,IAAD,CACE3K,QAAQ,IACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,UAHpB,SAKGxD,GACC7D,GAAS0B,MAAM,GAAGkI,QAClB5J,GAASyD,kBAKjB,SAAC,KAAD,CAAM+D,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SAEf8I,UAAU,SACVxK,QAAS,EALX,UAOE,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,0BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,aAIpB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGwB,KAAI,SAAC5G,GAAD,eACtB,UAAC3G,EAAD,CACEoF,SAAUA,KAAQ,eAAauB,GAC/BuE,SAAU5F,GAAa,QAAD,OAASqB,IAFjC,WAKE,SAACjG,EAAD,CACE,+BAAuBiG,EAAvB,aACAP,GAAE,eAAUO,EAAV,YAFJ,UAIE,UAAC,KAAD,CACEiF,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SACXmK,QAAS,EALX,WAOE,SAAC,KAAD,CAAMnB,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CAAKnL,GAAI,CAAEiM,GAAI,GAAf,UACE,UAAC,KAAD,CACEjB,WAAS,EACTC,UAAU,SACV9I,eAAe,SACfD,WAAW,OAJb,WAME,SAAC,KAAD,CAAMgJ,MAAI,EAAV,UACE,SAAC,IAAD,CAAYlK,QAAQ,KAAKd,MAAM,cAA/B,UACE,uBAAI+G,GAAmBlB,UAG3B,SAAC,KAAD,CAAMmF,MAAI,EAAV,UACE,SAAC,IAAD,CACElK,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,UAKE,8BAAGjE,GAAgBf,iBAM7B,SAAC,KAAD,CAAMmF,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,gBACE8K,IAAG,UAAKrM,GAAL,OAAuBqJ,GAAU,OAClC7E,SADkC,IAClCA,IADkC,UAClCA,GAAU0B,MAAMW,UADkB,iBAClC,EAAoBR,QAAQ,UADM,aAClC,EAAgCC,KAElC8F,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,gBAIZ,SAAC,KAAD,CAAMT,MAAI,EAACC,GAAI,EAAf,UACE,UAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,WAME,SAAC,IAAD,CAAYO,QAAQ,KAApB,SACGgC,GACC,yBACGU,GAAS0B,MAAMW,GAAGT,KAAKsB,IAAIoF,UAAY,IAD1C,WAIA,0BAIM,GAFAtI,GAAS0B,MAAMW,GAAGT,KAAKsB,IAAIoF,UAC3B,KAEA,EACF,IACAA,UAPJ,aAYJ,SAAC,IAAD,CAAYhL,QAAQ,KAAKd,MAAM,gBAA/B,SACG8C,GACC,yBACGU,GAAS0B,MAAMW,GAAGT,KAAKsH,MAAMZ,UAAY,IAD5C,WAIA,0BAIM,GAFAtI,GAAS0B,MAAMW,GAAGT,KAAKsH,MAAMZ,UAC7B,KAEA,EACF,IACAA,UAPJ,uBAgBZ,UAACtL,EAAD,YACE,UAAC,KAAD,CACEsK,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SACXmK,QAAS,EACTrM,GAAI,CAAE6M,GAAI,EAAGzL,OAAQ,QANvB,WAQE,SAAC,KAAD,CAAM8J,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,6BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,UAME,gBACE8K,IAAG,UAAKpM,EAAL,YAA4B2J,IAC5BpF,GAAS0B,MAAMW,GAAG+G,WAAWd,YAEhCV,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,gBAIZ,SAAC,KAAD,CAAMT,MAAI,EAACC,GAAI,EAAf,UACE,UAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,OACf8I,UAAU,MACVxK,QAAS,EAJX,WAME,UAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,UAOGrH,GAAS0B,MAAMW,GAAG+G,WAAWd,UAPhC,QAOgD,IAC7CvE,GAAa/D,GAAS0B,MAAMW,GAAGgH,cAElC,gBACExB,IAAG,UAAKrM,EAAL,gBACHoM,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,SACN1K,MAAO,CACLV,UAAU,UAAD,OACPmD,GAAS0B,MAAMW,GAAGgH,SAAW,IADtB,gBAQjB,SAAC,KAAD,CAAM7B,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,0BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CAAYO,QAAQ,KAApB,SACGgC,GACC,yBACGU,GAAS0B,MAAMW,GAAGT,KAAK0H,KAAKhB,UAAY,IAD3C,WAIA,0BAIM,GAFAtI,GAAS0B,MAAMW,GAAGT,KAAK0H,KAAKhB,UAC5B,KAEA,EACF,IACAA,UAPJ,oBAeV,UAAC,KAAD,CACEhB,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SACXmK,QAAS,EACTrM,GAAI,CAAE6M,GAAI,EAAGzL,OAAQ,QANvB,WAQE,SAAC,KAAD,CAAM8J,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,2BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,UAME,gBACE8K,IAAG,UAAKrM,EAAL,kBACHoM,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,gBAIZ,SAAC,KAAD,CAAMT,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,OACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,UAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,UAKGrH,GAAS0B,MAAMW,GAAGuG,SALrB,eAUJ,SAAC,KAAD,CAAMpB,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,sBASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CAAYO,QAAQ,KAApB,SACGgC,GACC,yBACGU,GAAS0B,MAAMW,GAAGT,KAAKsB,IAAIoF,UAAY,IAD1C,WAIA,0BAIM,GAFAtI,GAAS0B,MAAMW,GAAGT,KAAKsB,IAAIoF,UAC3B,KAEA,EACF,IACAA,UAPJ,oBAeV,UAAC,KAAD,CACEhB,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SACXmK,QAAS,EACTrM,GAAI,CAAE6M,GAAI,EAAGzL,OAAQ,QANvB,WAQE,SAAC,KAAD,CAAM8J,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,2BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,UAME,gBACE8K,IAAG,UAAKpM,EAAL,kBACHmM,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,gBAIZ,SAAC,KAAD,CAAMT,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,OACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,UAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,UAKGrH,GAAS0B,MAAMW,GAAGwG,SALrB,aASJ,SAAC,KAAD,CAAMrB,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,0BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CAAYO,QAAQ,KAApB,SACGgC,GACC,yBACGU,GAAS0B,MAAMW,GAAGT,KAAK2H,IAAIjB,UAAY,IAD1C,WAIA,0BAIM,GAFAtI,GAAS0B,MAAMW,GAAGT,KAAK2H,IAAIjB,UAC3B,KAEA,EACF,IACAA,UAPJ,oBAeV,UAAC,KAAD,CACEhB,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SACXmK,QAAS,EACTrM,GAAI,CAAE6M,GAAI,EAAGzL,OAAQ,QANvB,WAQE,SAAC,KAAD,CAAM8J,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,2BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,UAME,gBACE8K,IAAG,UAAKrM,EAAL,YAAwByJ,IACxBjF,GAAS0B,MAAMW,GAAGmH,IAAIlB,YAEzBV,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,gBAIZ,SAAC,KAAD,CAAMT,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,OACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,SAKGlC,IAAYnF,GAAS0B,MAAMW,GAAGmH,IAAIlB,kBAIzC,SAAC,KAAD,CAAMd,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,wBASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CAAYO,QAAQ,KAApB,SACGgC,GACC,yBACGU,GAAS0B,MAAMW,GAAGT,KAAKsH,MAAMZ,UAAY,IAD5C,WAIA,0BAIM,GAFAtI,GAAS0B,MAAMW,GAAGT,KAAKsH,MAAMZ,UAC7B,KAEA,EACF,IACAA,UAPJ,oBAeV,UAAC,KAAD,CACEhB,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SACXmK,QAAS,EACTrM,GAAI,CAAE6M,GAAI,EAAGzL,OAAQ,QANvB,WAQE,SAAC,KAAD,CAAM8J,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,6BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,UAME,gBACE8K,IAAG,UAAKpM,EAAL,YAA4BqJ,GAC7B9E,GAAS0B,MAAMW,GAAGoH,aAEpB7B,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,gBAIZ,SAAC,KAAD,CAAMT,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,OACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,SAKGrC,GAAahF,GAAS0B,MAAMW,GAAGoH,mBAItC,SAAC,KAAD,CAAMjC,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,QAEjB,UAAC,KAAD,CACEH,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SACXmK,QAAS,EACTrM,GAAI,CAAE6M,GAAI,GANZ,WAQE,SAAC,KAAD,CAAM3B,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SAEf8I,UAAU,SACVxK,QAAS,EALX,UAOE,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,0BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,UAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,WAME,SAAC,IAAD,CAAKT,GAAI,CAAEoN,IAAK,GAAhB,UACE,gBACE7B,IAAG,UAAKrM,EAAL,gBACHoM,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,cAGV,SAAC,IAAD,CACE3K,QAAQ,IACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,UAHpB,SAKGxD,GACC7D,GAAS0B,MAAMW,GAAGV,QAClB3B,GAASyD,kBAKjB,SAAC,KAAD,CAAM+D,MAAI,EAACC,GAAI,EAAf,UACE,UAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,WAME,SAAC,IAAD,CAAKT,GAAI,CAAEoN,IAAK,GAAhB,UACE,gBACE7B,IAAG,UAAKrM,EAAL,eACHoM,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,cAGV,SAAC,IAAD,CACE3K,QAAQ,IACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,UAHpB,SAKGxD,GACC7D,GAAS0B,MAAMW,GAAGN,OAClB/B,GAASyD,kBAKjB,SAAC,KAAD,CAAM+D,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SAEf8I,UAAU,SACVxK,QAAS,EALX,UAOE,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,yBASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,QAEjB,UAAC,KAAD,CACEH,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SACXmK,QAAS,EACTrM,GAAI,CAAE6M,GAAI,GANZ,WAQE,SAAC,KAAD,CAAM3B,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,MACVxK,QAAS,EAJX,UAME,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,2BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,UAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,WAME,SAAC,IAAD,CAAKT,GAAI,CAAEoN,IAAK,GAAhB,UACE,gBACE7B,IAAG,UAAKrM,EAAL,iBACHoM,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,cAGV,SAAC,IAAD,CACE3K,QAAQ,IACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,UAHpB,SAKGxD,GACC7D,GAAS0B,MAAMW,GAAGsH,SAClB3J,GAASyD,kBAKjB,SAAC,KAAD,CAAM+D,MAAI,EAACC,GAAI,EAAf,UACE,UAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SACf8I,UAAU,SACVxK,QAAS,EAJX,WAME,SAAC,IAAD,CAAKT,GAAI,CAAEoN,IAAK,GAAhB,UACE,gBACE7B,IAAG,UAAKrM,EAAL,gBACHoM,IAAI,UACJlK,OAAO,OACPQ,MAAM,OACN8J,WAAW,EACXC,MAAM,cAGV,SAAC,IAAD,CACE3K,QAAQ,IACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,UAHpB,SAKGxD,GACC7D,GAAS0B,MAAMW,GAAGuH,QAClB5J,GAASyD,kBAKjB,SAAC,KAAD,CAAM+D,MAAI,EAACC,GAAI,EAAf,UACE,SAAC,IAAD,CACEjJ,WAAW,SACXC,eAAe,SAEf8I,UAAU,SACVxK,QAAS,EALX,UAOE,SAAC,IAAD,CACEO,QAAQ,KACRd,MAAM,gBACNF,GAAI,CAAE+K,WAAY,SAHpB,0BASJ,SAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,KACf,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,YAjzBdzH,GAAS0B,MAAMW,GAAGZ,WAwzB7B,SAAC,IAAD,CAAKnF,GAAI,CAAEiC,QAAS,CAAEkJ,GAAI,QAASC,GAAI,SAAvC,UACE,UAAC,IAAD,CAAOjJ,eAAe,SAAS8I,UAAU,SAASxK,QAAS,EAA3D,WACE,UAAC,KAAD,CACEuK,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SAJb,WAME,SAAC,KAAD,CACEgJ,MAAI,EACJC,GAAI,EACJnL,GAAsB,CAAEuJ,UAAW,UAHrC,UAKE,SAAC,IAAD,CAAYvI,QAAQ,KAAKd,MAAM,gBAA/B,UACE,2CAGJ,SAAC,KAAD,CACEgL,MAAI,EACJC,GAAI,EACJnL,GAAsB,CAAEuJ,UAAW,UAHrC,SAKG3G,EAAKyG,MACJ,gBACEkC,IAAG,UA/pIPvM,oCA+pIO,YAAoB4D,EAAK2C,QAAQ,GAAGwC,KAApC,QACHuD,IAAI,iBAEJ,QAEN,SAAC,KAAD,CACEJ,MAAI,EACJC,GAAI,EACJnL,GAAsB,CAAEuJ,UAAW,UAHrC,UAKE,SAAC,IAAD,CAAYvI,QAAQ,KAAKd,MAAM,gBAA/B,SACG0C,EAAK2C,SACJ,uBACG3C,EAAK2C,QAAQ,GAAGwG,YACdwB,cACAC,MAAM,KACNb,KACC,SAACc,GAAD,OACEA,EAAKC,OAAO,GAAG5B,cAAgB2B,EAAKE,UAAU,MAEjDC,KAAK,OAER,aAIV,UAAC,KAAD,CACE5C,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SAJb,WAME,SAAC,KAAD,CACEgJ,MAAI,EACJC,GAAI,EACJnL,GAAsB,CAAEuJ,UAAW,UAHrC,UAKE,SAAC,IAAD,CAAYvI,QAAQ,KAAKd,MAAM,gBAA/B,UACE,2CAGJ,SAAC,KAAD,CACEgL,MAAI,EACJC,GAAI,EACJnL,GAAsB,CAAEuJ,UAAW,UAHrC,UAKE,SAAC,MAAD,CAAetI,MAAO,CAAEhB,SAAU,SAEpC,SAAC,KAAD,CACEiL,MAAI,EACJC,GAAI,EACJnL,GAAsB,CAAEuJ,UAAW,UAHrC,UAKE,SAAC,IAAD,CAAYvI,QAAQ,KAAKd,MAAM,gBAA/B,SACG8C,GACC,yBAAIJ,EAAKyG,KAAK8C,WAAWH,UAAY,IAArC,YAEA,0BAE8C,GAAxCpJ,EAAKyG,KAAK8C,WAAWH,UAAY,KAAY,EAC/C,IACAA,UAJJ,mBAWR,UAAC,KAAD,CACEhB,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SAJb,WAME,SAAC,KAAD,CACEgJ,MAAI,EACJC,GAAI,EACJnL,GAAsB,CAAEuJ,UAAW,UAHrC,UAKE,SAAC,IAAD,CAAYvI,QAAQ,KAAKd,MAAM,gBAA/B,UACE,yCAGJ,SAAC,KAAD,CACEgL,MAAI,EACJC,GAAI,EACJnL,GAAsB,CAAEuJ,UAAW,UAHrC,UAKE,SAAC,MAAD,CAAYtI,MAAO,CAAEhB,SAAU,SAEjC,SAAC,KAAD,CACEiL,MAAI,EACJC,GAAI,EACJnL,GAAsB,CAAEuJ,UAAW,UAHrC,UAKE,SAAC,IAAD,CAAYvI,QAAQ,KAAKd,MAAM,gBAA/B,SACG0C,EAAKyG,MAAO,yBAAIzG,EAAKyG,KAAKkD,SAAd,QAAgC,aAInD,UAAC,KAAD,CACEvB,WAAS,EACTC,UAAU,MACV9I,eAAe,SACfD,WAAW,SAJb,WAME,SAAC,KAAD,CACEgJ,MAAI,EACJC,GAAI,EACJnL,GAAsB,CAAEuJ,UAAW,UAHrC,UAKE,SAAC,IAAD,CAAYvI,QAAQ,KAAKd,MAAM,gBAA/B,UACE,2CAGJ,SAAC,KAAD,CACEgL,MAAI,EACJC,GAAI,EACJnL,GAAsB,CAAEuJ,UAAW,UAHrC,UAKE,SAAC,IAAD,CAAStI,MAAO,CAAEhB,SAAU,SAE9B,SAAC,KAAD,CACEiL,MAAI,EACJC,GAAI,EACJnL,GAAsB,CAAEuJ,UAAW,UAHrC,UAKE,SAAC,IAAD,CAAYvI,QAAQ,KAAKd,MAAM,gBAA/B,SACG0C,EAAKoH,MACJ,yBAAIpH,EAAKoH,KAAKjB,MAAMiD,QAAQ,GAA5B,UACE,qBAkBhB,iCACE,SAAC,IAAD,CAAKhM,GAAI,CAAEiC,QAAS,CAAEkJ,GAAI,OAAQC,GAAI,UAAtC,UACE,SAAC,IAAD,CACEpL,GAAI,CAAEmJ,IAAK,GACXlH,QAAQ,OACRE,eAAe,SACfD,WAAW,SAJb,UAME,gBACEqJ,IAAG,UAAKvM,MAAL,iCACHsM,IAAI,UACJI,WAAW,SAKjB,SAAC,IAAD,CAAK1L,GAAI,CAAEiC,QAAS,CAAEmJ,GAAI,SAA1B,UACE,SAAC,IAAD,CACEpL,GAAI,CAAEmJ,IAAK,GACXlH,QAAQ,OACRE,eAAe,SACfD,WAAW,SAJb,UAME,gBACEqJ,IAAG,UAAKvM,MAAL,iCACHsM,IAAI,UACJlK,OAAO,MACPQ,MAAM,MACN8J,WAAW","sources":["pages/Weather.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {\r\n  Typography,\r\n  Container,\r\n  Box,\r\n  Grid,\r\n  IconButton,\r\n  Button,\r\n  Stack,\r\n} from '@mui/material'\r\nimport SearchIcon from '@mui/icons-material/Search'\r\nimport { styled, alpha } from '@mui/material/styles'\r\nimport InputBase from '@mui/material/InputBase'\r\nimport axios from 'axios'\r\nimport CloseIcon from '@mui/icons-material/Close'\r\nimport AirIcon from '@mui/icons-material/Air'\r\nimport { WiHumidity, WiThermometer } from 'react-icons/wi'\r\nimport Snackbar from '@mui/material/Snackbar'\r\nimport MuiAlert from '@mui/material/Alert'\r\nimport Divider from '@mui/material/Divider'\r\nimport GpsFixedIcon from '@mui/icons-material/GpsFixed'\r\nimport RefreshIcon from '@mui/icons-material/Refresh'\r\nimport Carousel from 'react-elastic-carousel'\r\nimport ArrowForwardIosSharpIcon from '@mui/icons-material/ArrowForwardIosSharp'\r\nimport MuiAccordion from '@mui/material/Accordion'\r\nimport MuiAccordionSummary from '@mui/material/AccordionSummary'\r\nimport MuiAccordionDetails from '@mui/material/AccordionDetails'\r\n\r\nconst apiKey = process.env.REACT_APP_OPENWEATHER_API_KEY\r\nconst apiUrl = process.env.REACT_APP_OPENWEATHER_URL\r\nconst apiIconsUrl = process.env.REACT_APP_OPENWEATHER_ICONS_URL\r\nconst flagsUrl = process.env.REACT_APP_COUNTRY_FLAG_ICONS_URL\r\nconst weatherIconsUrl = process.env.REACT_APP_ANIMATED_WEATHER_ICONS_URL\r\nconst weatherFillIconsUrl =\r\n  process.env.REACT_APP_ANIMATED_WEATHER_FILL_ICONS_URL\r\n\r\nconst Accordion = styled((props) => (\r\n  <MuiAccordion disableGutters elevation={0} square {...props} />\r\n))(({ theme }) => ({\r\n  borderBottom: `2px solid ${theme.palette.divider}`,\r\n}))\r\n\r\nconst AccordionSummary = styled((props) => (\r\n  <MuiAccordionSummary\r\n    expandIcon={\r\n      <ArrowForwardIosSharpIcon sx={{ fontSize: '26px' }} color=\"secondary\" />\r\n    }\r\n    {...props}\r\n  />\r\n))(({ theme }) => ({\r\n  backgroundColor: theme.palette.background.default,\r\n  flexDirection: 'row-reverse',\r\n  '& .MuiAccordionSummary-expandIconWrapper.Mui-expanded': {\r\n    transform: 'rotate(90deg)',\r\n  },\r\n  '& .MuiAccordionSummary-content': {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n}))\r\n\r\nconst AccordionDetails = styled(MuiAccordionDetails)(({ theme }) => ({\r\n  backgroundColor: theme.palette.background.default,\r\n  padding: theme.spacing(2),\r\n}))\r\n\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />\r\n})\r\n\r\nconst style = {\r\n  // background: 'linear-gradient(45deg, #FE6B8B 10%, #FF8E53 90%)',\r\n  fontSize: 16,\r\n  borderRadius: 50,\r\n  border: 0,\r\n  // color: 'white',\r\n  height: 63,\r\n  padding: '0 16px',\r\n  // boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .30)',\r\n}\r\n\r\nconst Search = styled('div')(({ theme }) => ({\r\n  position: 'relative',\r\n  borderRadius: theme.shape.borderRadius,\r\n  backgroundColor: alpha(theme.palette.search.primary, 0.1),\r\n  '&:hover': {\r\n    backgroundColor: alpha(theme.palette.search.primary, 0.14),\r\n  },\r\n  marginRight: theme.spacing(2),\r\n  marginLeft: 0,\r\n  width: '100%',\r\n  [theme.breakpoints.up('sm')]: {\r\n    marginLeft: theme.spacing(3),\r\n    width: '400px',\r\n  },\r\n}))\r\n\r\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\r\n  padding: theme.spacing(0, 2),\r\n  height: '100%',\r\n  position: 'absolute',\r\n  pointerEvents: 'none',\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  justifyContent: 'center',\r\n}))\r\n\r\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  color: 'inherit',\r\n  '& .MuiInputBase-input': {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\r\n    transition: theme.transitions.create('width'),\r\n    width: 'auto',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: '342px',\r\n    },\r\n  },\r\n}))\r\n\r\nexport default function Weather() {\r\n  const [data, setData] = useState({})\r\n  const [location, setLocation] = useState('')\r\n  const [celsius, setCelsius] = useState(true)\r\n  const [error, setError] = useState(false)\r\n  const [open, setOpen] = useState(false)\r\n\r\n  const [lat, setLat] = useState(0)\r\n  const [lon, setLon] = useState(0)\r\n\r\n  const [forecast, setForecast] = useState({})\r\n  const [degree, setDegree] = useState(0)\r\n\r\n  const [hourlyForecast, setHourlyForecast] = useState([])\r\n\r\n  // localStorage\r\n  useEffect(() => {\r\n    setData(JSON.parse(window.localStorage.getItem('dataWeather')))\r\n    setLocation(JSON.parse(window.localStorage.getItem('location')))\r\n    setCelsius(JSON.parse(window.localStorage.getItem('celsius')))\r\n    setLat(JSON.parse(window.localStorage.getItem('lat')))\r\n    setLon(JSON.parse(window.localStorage.getItem('lon')))\r\n    setForecast(JSON.parse(window.localStorage.getItem('forecast')))\r\n    setDegree(JSON.parse(window.localStorage.getItem('degree')))\r\n    setHourlyForecast(JSON.parse(window.localStorage.getItem('hourlyForecast')))\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem('dataWeather', JSON.stringify(data))\r\n  }, [data])\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem('location', JSON.stringify(location))\r\n  }, [location])\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem('celsius', JSON.stringify(celsius))\r\n  }, [celsius])\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem('lat', JSON.stringify(lat))\r\n  }, [lat])\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem('lon', JSON.stringify(lon))\r\n  }, [lon])\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem('forecast', JSON.stringify(forecast))\r\n  }, [forecast])\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem('degree', JSON.stringify(degree))\r\n  }, [degree])\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(\r\n      'hourlyForecast',\r\n      JSON.stringify(hourlyForecast)\r\n    )\r\n  }, [hourlyForecast])\r\n\r\n  const [expanded, setExpanded] = useState('') //'panel0'\r\n\r\n  const handleChange = (panel) => (event, newExpanded) => {\r\n    setExpanded(newExpanded ? panel : false)\r\n  }\r\n\r\n  const getLocation = () => {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      setLat(position.coords.latitude)\r\n      setLon(position.coords.longitude)\r\n    })\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        setLat(position.coords.latitude)\r\n        setLon(position.coords.longitude)\r\n        const urlGeo = `${apiUrl}/weather?lat=${position.coords.latitude}&lon=${position.coords.longitude}&appid=${apiKey}`\r\n        axios\r\n          .get(urlGeo)\r\n          .then((response) => {\r\n            setData(response.data)\r\n            // console.log('getLocation:', response.data)\r\n            setDegree(response.data.wind.deg)\r\n            // setOpen(true)\r\n          })\r\n          .catch((error) => {\r\n            setError(true)\r\n            setOpen(true)\r\n            console.error('THIS IS ERROR --->', error)\r\n          })\r\n        setError(false)\r\n        setLocation('')\r\n      })\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const urlForecast = `${apiUrl}/onecall?lat=${lat}&lon=${lon}&exclude=minutely&appid=${apiKey}`\r\n    axios\r\n      .get(urlForecast)\r\n      .then((response) => {\r\n        setForecast(response.data)\r\n        // console.log('useEffect getForecast:', response.data)\r\n\r\n        let sun = [\r\n          {\r\n            dt: response.data.daily[0].sunrise,\r\n            temp: 995,\r\n            weather: [{ id: 995 }],\r\n          },\r\n          {\r\n            dt: response.data.daily[1].sunrise,\r\n            temp: 995,\r\n            weather: [{ id: 995 }],\r\n          },\r\n          {\r\n            dt: response.data.daily[2].sunrise,\r\n            temp: 995,\r\n            weather: [{ id: 995 }],\r\n          },\r\n          {\r\n            dt: response.data.daily[0].sunset,\r\n            temp: 999,\r\n            weather: [{ id: 999 }],\r\n          },\r\n          {\r\n            dt: response.data.daily[1].sunset,\r\n            temp: 999,\r\n            weather: [{ id: 999 }],\r\n          },\r\n          {\r\n            dt: response.data.daily[2].sunset,\r\n            temp: 999,\r\n            weather: [{ id: 999 }],\r\n          },\r\n        ]\r\n\r\n        setHourlyForecast(\r\n          [...response.data.hourly, ...sun]\r\n            .sort((a, b) => a.dt - b.dt)\r\n            .filter((i) => i.dt > response.data.current.dt)\r\n        )\r\n\r\n        // console.log(\r\n        //   'hourlyForecast + sunrise&sunset + sort + filter > curr dt:',\r\n        //   [...response.data.hourly, ...sun]\r\n        //     .sort((a, b) => a.dt - b.dt)\r\n        //     .filter((i) => i.dt > response.data.current.dt)\r\n        // )\r\n      })\r\n      .catch((error) => {\r\n        setError(true)\r\n        setOpen(true)\r\n        console.error('THIS IS ERROR --->', error)\r\n      })\r\n    setError(false)\r\n    setLocation('')\r\n  }, [data])\r\n\r\n  const searchLocation = (event) => {\r\n    const url = `${apiUrl}/weather?q=${location}&appid=${apiKey}`\r\n    if (event.key === 'Enter') {\r\n      axios\r\n        .get(url)\r\n        .then((response) => {\r\n          setLat(response.data.coord.lat)\r\n          setLon(response.data.coord.lon)\r\n          // console.log(response.data.coord.lat)\r\n          // console.log(response.data.coord.lon)\r\n          setDegree(response.data.wind.deg)\r\n          setData(response.data)\r\n          // console.log('searchLocation:', response.data)\r\n          // setOpen(true)\r\n        })\r\n        .catch((error) => {\r\n          setError(true)\r\n          setOpen(true)\r\n          console.error('THIS IS ERROR --->', error)\r\n        })\r\n      setError(false)\r\n      setLocation('')\r\n    }\r\n  }\r\n\r\n  // const refreshLocation = () => {\r\n  //   const url = `${apiUrl}/weather?q=${data.name}&appid=${apiKey}`\r\n  //   axios\r\n  //     .get(url)\r\n  //     .then((response) => {\r\n  //       setLat(response.data.coord.lat)\r\n  //       setLon(response.data.coord.lon)\r\n  //       // console.log(response.data.coord.lat)\r\n  //       // console.log(response.data.coord.lon)\r\n  //       setDegree(response.data.wind.deg)\r\n  //       setData(response.data)\r\n  //       console.log('searchLocation:', response.data)\r\n  //       // setOpen(true)\r\n  //     })\r\n  //     .catch((error) => {\r\n  //       setError(true)\r\n  //       setOpen(true)\r\n  //       console.error('THIS IS ERROR --->', error)\r\n  //     })\r\n  //   setError(false)\r\n  //   setLocation('')\r\n  // }\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return\r\n    }\r\n    setOpen(false)\r\n  }\r\n\r\n  const clearData = () => {\r\n    setData({})\r\n  }\r\n\r\n  let date = new Date()\r\n  let options = { weekday: 'long', month: 'long', day: 'numeric' }\r\n  let todayDate = new Intl.DateTimeFormat('en-GB', options).format(date)\r\n\r\n  const getDateFromUnix = (i) => {\r\n    let unixTimestamp = forecast.daily[i].dt\r\n    let dateFromUnix = new Date(unixTimestamp * 1000)\r\n    let options = { month: 'long', day: 'numeric' }\r\n    return new Intl.DateTimeFormat('en-GB', options).format(dateFromUnix)\r\n  }\r\n\r\n  const getWeekdayFromUnix = (i) => {\r\n    let unixTimestamp = forecast.daily[i].dt\r\n    let dateFromUnix = new Date(unixTimestamp * 1000)\r\n    let options = { weekday: 'long' }\r\n    return new Intl.DateTimeFormat('en-GB', options).format(dateFromUnix)\r\n  }\r\n\r\n  const getTimeFromUnix = (i, timezone) => {\r\n    let unixTimestamp = hourlyForecast[i].dt\r\n    let dateFromUnix = new Date(unixTimestamp * 1000)\r\n    let options = { timeStyle: 'short', timeZone: timezone }\r\n    return new Intl.DateTimeFormat('en-GB', options).format(dateFromUnix)\r\n  }\r\n\r\n  const getTimeFromDailyUnix = (unix, timezone) => {\r\n    let dateFromUnix = new Date(unix * 1000)\r\n    let options = { timeStyle: 'short', timeZone: timezone }\r\n    return new Intl.DateTimeFormat('en-GB', options).format(dateFromUnix)\r\n  }\r\n\r\n  const getDirection = (degrees) => {\r\n    const directions = ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW']\r\n\r\n    degrees = (degrees * 8) / 360\r\n    degrees = Math.round(degrees, 0)\r\n    degrees = (degrees + 8) % 8\r\n\r\n    return directions[degrees]\r\n  }\r\n\r\n  function getCurrentIconUrl(id) {\r\n    let dayOrNight = forecast?.current?.weather[0]?.icon // 13d / 02n ...\r\n    let result = dayOrNight.slice(dayOrNight.length - 1) // 'd'= day / 'n'= night\r\n\r\n    if (result === 'd') {\r\n      switch (id) {\r\n        case 200:\r\n          return '/thunderstorms-day-rain.svg'\r\n          break\r\n        case 201:\r\n        case 202:\r\n          return '/thunderstorms-rain.svg'\r\n          break\r\n        case 210:\r\n          return '/thunderstorms-day.svg'\r\n          break\r\n        case 211:\r\n        case 212:\r\n        case 221:\r\n        case 230:\r\n        case 231:\r\n        case 232:\r\n          return '/thunderstorms.svg'\r\n          break\r\n        case 300:\r\n          return '/partly-cloudy-day-drizzle.svg'\r\n          break\r\n        case 301:\r\n        case 302:\r\n          return '/drizzle.svg'\r\n          break\r\n        case 310:\r\n        case 311:\r\n        case 312:\r\n        case 313:\r\n        case 314:\r\n        case 321:\r\n          return '/rain.svg'\r\n          break\r\n        case 500:\r\n        case 501:\r\n        case 502:\r\n        case 503:\r\n        case 504:\r\n          return '/partly-cloudy-day-rain.svg'\r\n          break\r\n        case 511:\r\n          return '/snow.svg'\r\n          break\r\n        case 520:\r\n        case 521:\r\n        case 522:\r\n        case 531:\r\n          return '/rain.svg'\r\n          break\r\n        case 600:\r\n        case 601:\r\n          return '/partly-cloudy-day-snow.svg'\r\n          break\r\n        case 602:\r\n        case 611:\r\n        case 612:\r\n        case 613:\r\n        case 615:\r\n        case 616:\r\n        case 620:\r\n        case 621:\r\n        case 622:\r\n          return '/snow.svg'\r\n          break\r\n        case 701:\r\n          return '/mist.svg'\r\n          break\r\n        case 711:\r\n          return '/partly-cloudy-day-smoke.svg'\r\n          break\r\n        case 721:\r\n          return '/haze-day.svg'\r\n          break\r\n        case 731:\r\n          return '/dust-day.svg'\r\n          break\r\n        case 741:\r\n          return '/fog-day.svg'\r\n          break\r\n        case 751:\r\n        case 761:\r\n        case 762:\r\n          return '/dust-day.svg'\r\n          break\r\n        case 771:\r\n          return '/wind.svg'\r\n          break\r\n        case 781:\r\n          return '/tornado.svg'\r\n          break\r\n        case 800:\r\n          return '/clear-day.svg'\r\n          break\r\n        case 801:\r\n          return '/partly-cloudy-day.svg'\r\n          break\r\n        case 802:\r\n          // return '/cloudy.svg'\r\n          return '/partly-cloudy-day.svg'\r\n          break\r\n        case 803:\r\n        case 804:\r\n          return '/overcast-day.svg'\r\n          break\r\n        default:\r\n          return '/not-available.svg'\r\n      }\r\n    } else {\r\n      switch (id) {\r\n        case 200:\r\n          return '/thunderstorms-night-rain.svg'\r\n          break\r\n        case 201:\r\n        case 202:\r\n          return '/thunderstorms-rain.svg'\r\n          break\r\n        case 210:\r\n          return '/thunderstorms-night.svg'\r\n          break\r\n        case 211:\r\n        case 212:\r\n        case 221:\r\n        case 230:\r\n        case 231:\r\n        case 232:\r\n          return '/thunderstorms.svg'\r\n          break\r\n        case 300:\r\n          return '/partly-cloudy-night-drizzle.svg'\r\n          break\r\n        case 301:\r\n        case 302:\r\n          return '/drizzle.svg'\r\n          break\r\n        case 310:\r\n        case 311:\r\n        case 312:\r\n        case 313:\r\n        case 314:\r\n        case 321:\r\n          return '/rain.svg'\r\n          break\r\n        case 500:\r\n        case 501:\r\n        case 502:\r\n        case 503:\r\n        case 504:\r\n          return '/partly-cloudy-night-rain.svg'\r\n          break\r\n        case 511:\r\n          return '/snow.svg'\r\n          break\r\n        case 520:\r\n        case 521:\r\n        case 522:\r\n        case 531:\r\n          return '/rain.svg'\r\n          break\r\n        case 600:\r\n        case 601:\r\n          return '/partly-cloudy-night-snow.svg'\r\n          break\r\n        case 602:\r\n        case 611:\r\n        case 612:\r\n        case 613:\r\n        case 615:\r\n        case 616:\r\n        case 620:\r\n        case 621:\r\n        case 622:\r\n          return '/snow.svg'\r\n          break\r\n        case 701:\r\n          return '/mist.svg'\r\n          break\r\n        case 711:\r\n          return '/partly-cloudy-night-smoke.svg'\r\n          break\r\n        case 721:\r\n          return '/haze-night.svg'\r\n          break\r\n        case 731:\r\n          return '/dust-night.svg'\r\n          break\r\n        case 741:\r\n          return '/fog-night.svg'\r\n          break\r\n        case 751:\r\n        case 761:\r\n        case 762:\r\n          return '/dust-night.svg'\r\n          break\r\n        case 771:\r\n          return '/wind.svg'\r\n          break\r\n        case 781:\r\n          return '/tornado.svg'\r\n          break\r\n        case 800:\r\n          return '/clear-night.svg'\r\n          // return '/starry-night.svg'\r\n          break\r\n        case 801:\r\n          return '/partly-cloudy-night.svg'\r\n          break\r\n        case 802:\r\n          // return '/cloudy.svg'\r\n          return '/partly-cloudy-night.svg'\r\n          break\r\n        case 803:\r\n        case 804:\r\n          return '/overcast-night.svg'\r\n          break\r\n        default:\r\n          return '/not-available.svg'\r\n      }\r\n    }\r\n  }\r\n\r\n  function getHourlyIconUrl(id, i) {\r\n    let isDay =\r\n      hourlyForecast[i]?.dt > forecast?.daily[0]?.sunrise &&\r\n      hourlyForecast[i]?.dt < forecast?.daily[0]?.sunset\r\n\r\n    let isDay2 =\r\n      hourlyForecast[i]?.dt > forecast?.daily[1]?.sunrise &&\r\n      hourlyForecast[i]?.dt < forecast?.daily[1]?.sunset\r\n\r\n    let isSunrise = hourlyForecast[i]?.dt === forecast?.current?.sunrise\r\n    let isSunset = hourlyForecast[i]?.dt === forecast?.current?.sunset\r\n\r\n    if (isSunrise) {\r\n      switch (id) {\r\n        case 995:\r\n          return '/sunrise.svg'\r\n        default:\r\n          return '/not-available.svg'\r\n      }\r\n    } else if (isSunset) {\r\n      switch (id) {\r\n        case 999:\r\n          return '/sunset.svg'\r\n        default:\r\n          return '/not-available.svg'\r\n      }\r\n    } else if (isDay) {\r\n      switch (id) {\r\n        case 995:\r\n          return '/sunrise.svg'\r\n        case 999:\r\n          return '/sunset.svg'\r\n        case 200:\r\n          return '/thunderstorms-day-rain.svg'\r\n          break\r\n        case 201:\r\n        case 202:\r\n          return '/thunderstorms-rain.svg'\r\n          break\r\n        case 210:\r\n          return '/thunderstorms-day.svg'\r\n          break\r\n        case 211:\r\n        case 212:\r\n        case 221:\r\n        case 230:\r\n        case 231:\r\n        case 232:\r\n          return '/thunderstorms.svg'\r\n          break\r\n        case 300:\r\n          return '/partly-cloudy-day-drizzle.svg'\r\n          break\r\n        case 301:\r\n        case 302:\r\n          return '/drizzle.svg'\r\n          break\r\n        case 310:\r\n        case 311:\r\n        case 312:\r\n        case 313:\r\n        case 314:\r\n        case 321:\r\n          return '/rain.svg'\r\n          break\r\n        case 500:\r\n        case 501:\r\n        case 502:\r\n        case 503:\r\n        case 504:\r\n          return '/partly-cloudy-day-rain.svg'\r\n          break\r\n        case 511:\r\n          return '/snow.svg'\r\n          break\r\n        case 520:\r\n        case 521:\r\n        case 522:\r\n        case 531:\r\n          return '/rain.svg'\r\n          break\r\n        case 600:\r\n        case 601:\r\n          return '/partly-cloudy-day-snow.svg'\r\n          break\r\n        case 602:\r\n        case 611:\r\n        case 612:\r\n        case 613:\r\n        case 615:\r\n        case 616:\r\n        case 620:\r\n        case 621:\r\n        case 622:\r\n          return '/snow.svg'\r\n          break\r\n        case 701:\r\n          return '/mist.svg'\r\n          break\r\n        case 711:\r\n          return '/partly-cloudy-day-smoke.svg'\r\n          break\r\n        case 721:\r\n          return '/haze-day.svg'\r\n          break\r\n        case 731:\r\n          return '/dust-day.svg'\r\n          break\r\n        case 741:\r\n          return '/fog-day.svg'\r\n          break\r\n        case 751:\r\n        case 761:\r\n        case 762:\r\n          return '/dust-day.svg'\r\n          break\r\n        case 771:\r\n          return '/wind.svg'\r\n          break\r\n        case 781:\r\n          return '/tornado.svg'\r\n          break\r\n        case 800:\r\n          return '/clear-day.svg'\r\n          break\r\n        case 801:\r\n          return '/partly-cloudy-day.svg'\r\n          break\r\n        case 802:\r\n          // return '/cloudy.svg'\r\n          return '/partly-cloudy-day.svg'\r\n          break\r\n        case 803:\r\n        case 804:\r\n          return '/overcast-day.svg'\r\n          break\r\n        default:\r\n          return '/not-available.svg'\r\n      }\r\n    } else if (isDay2) {\r\n      switch (id) {\r\n        case 995:\r\n          return '/sunrise.svg'\r\n        case 999:\r\n          return '/sunset.svg'\r\n        case 200:\r\n          return '/thunderstorms-day-rain.svg'\r\n          break\r\n        case 201:\r\n        case 202:\r\n          return '/thunderstorms-rain.svg'\r\n          break\r\n        case 210:\r\n          return '/thunderstorms-day.svg'\r\n          break\r\n        case 211:\r\n        case 212:\r\n        case 221:\r\n        case 230:\r\n        case 231:\r\n        case 232:\r\n          return '/thunderstorms.svg'\r\n          break\r\n        case 300:\r\n          return '/partly-cloudy-day-drizzle.svg'\r\n          break\r\n        case 301:\r\n        case 302:\r\n          return '/drizzle.svg'\r\n          break\r\n        case 310:\r\n        case 311:\r\n        case 312:\r\n        case 313:\r\n        case 314:\r\n        case 321:\r\n          return '/rain.svg'\r\n          break\r\n        case 500:\r\n        case 501:\r\n        case 502:\r\n        case 503:\r\n        case 504:\r\n          return '/partly-cloudy-day-rain.svg'\r\n          break\r\n        case 511:\r\n          return '/snow.svg'\r\n          break\r\n        case 520:\r\n        case 521:\r\n        case 522:\r\n        case 531:\r\n          return '/rain.svg'\r\n          break\r\n        case 600:\r\n        case 601:\r\n          return '/partly-cloudy-day-snow.svg'\r\n          break\r\n        case 602:\r\n        case 611:\r\n        case 612:\r\n        case 613:\r\n        case 615:\r\n        case 616:\r\n        case 620:\r\n        case 621:\r\n        case 622:\r\n          return '/snow.svg'\r\n          break\r\n        case 701:\r\n          return '/mist.svg'\r\n          break\r\n        case 711:\r\n          return '/partly-cloudy-day-smoke.svg'\r\n          break\r\n        case 721:\r\n          return '/haze-day.svg'\r\n          break\r\n        case 731:\r\n          return '/dust-day.svg'\r\n          break\r\n        case 741:\r\n          return '/fog-day.svg'\r\n          break\r\n        case 751:\r\n        case 761:\r\n        case 762:\r\n          return '/dust-day.svg'\r\n          break\r\n        case 771:\r\n          return '/wind.svg'\r\n          break\r\n        case 781:\r\n          return '/tornado.svg'\r\n          break\r\n        case 800:\r\n          return '/clear-day.svg'\r\n          break\r\n        case 801:\r\n          return '/partly-cloudy-day.svg'\r\n          break\r\n        case 802:\r\n          // return '/cloudy.svg'\r\n          return '/partly-cloudy-day.svg'\r\n          break\r\n        case 803:\r\n        case 804:\r\n          return '/overcast-day.svg'\r\n          break\r\n        default:\r\n          return '/not-available.svg'\r\n      }\r\n    } else {\r\n      switch (id) {\r\n        case 995:\r\n          return '/sunrise.svg'\r\n        case 999:\r\n          return '/sunset.svg'\r\n        case 200:\r\n          return '/thunderstorms-night-rain.svg'\r\n          break\r\n        case 201:\r\n        case 202:\r\n          return '/thunderstorms-rain.svg'\r\n          break\r\n        case 210:\r\n          return '/thunderstorms-night.svg'\r\n          break\r\n        case 211:\r\n        case 212:\r\n        case 221:\r\n        case 230:\r\n        case 231:\r\n        case 232:\r\n          return '/thunderstorms.svg'\r\n          break\r\n        case 300:\r\n          return '/partly-cloudy-night-drizzle.svg'\r\n          break\r\n        case 301:\r\n        case 302:\r\n          return '/drizzle.svg'\r\n          break\r\n        case 310:\r\n        case 311:\r\n        case 312:\r\n        case 313:\r\n        case 314:\r\n        case 321:\r\n          return '/rain.svg'\r\n          break\r\n        case 500:\r\n        case 501:\r\n        case 502:\r\n        case 503:\r\n        case 504:\r\n          return '/partly-cloudy-night-rain.svg'\r\n          break\r\n        case 511:\r\n          return '/snow.svg'\r\n          break\r\n        case 520:\r\n        case 521:\r\n        case 522:\r\n        case 531:\r\n          return '/rain.svg'\r\n          break\r\n        case 600:\r\n        case 601:\r\n          return '/partly-cloudy-night-snow.svg'\r\n          break\r\n        case 602:\r\n        case 611:\r\n        case 612:\r\n        case 613:\r\n        case 615:\r\n        case 616:\r\n        case 620:\r\n        case 621:\r\n        case 622:\r\n          return '/snow.svg'\r\n          break\r\n        case 701:\r\n          return '/mist.svg'\r\n          break\r\n        case 711:\r\n          return '/partly-cloudy-night-smoke.svg'\r\n          break\r\n        case 721:\r\n          return '/haze-night.svg'\r\n          break\r\n        case 731:\r\n          return '/dust-night.svg'\r\n          break\r\n        case 741:\r\n          return '/fog-night.svg'\r\n          break\r\n        case 751:\r\n        case 761:\r\n        case 762:\r\n          return '/dust-night.svg'\r\n          break\r\n        case 771:\r\n          return '/wind.svg'\r\n          break\r\n        case 781:\r\n          return '/tornado.svg'\r\n          break\r\n        case 800:\r\n          return '/clear-night.svg'\r\n          // return '/starry-night.svg'\r\n          break\r\n        case 801:\r\n          return '/partly-cloudy-night.svg'\r\n          break\r\n        case 802:\r\n          // return '/cloudy.svg'\r\n          return '/partly-cloudy-night.svg'\r\n          break\r\n        case 803:\r\n        case 804:\r\n          return '/overcast-night.svg'\r\n          break\r\n        default:\r\n          return '/not-available.svg'\r\n      }\r\n    }\r\n  }\r\n\r\n  function getIconUrl(id) {\r\n    switch (id) {\r\n      case 200:\r\n        return '/thunderstorms-day-rain.svg'\r\n        break\r\n      case 201:\r\n      case 202:\r\n        return '/thunderstorms-rain.svg'\r\n        break\r\n      case 210:\r\n        return '/thunderstorms-day.svg'\r\n        break\r\n      case 211:\r\n      case 212:\r\n      case 221:\r\n      case 230:\r\n      case 231:\r\n      case 232:\r\n        return '/thunderstorms.svg'\r\n        break\r\n      case 300:\r\n        return '/partly-cloudy-day-drizzle.svg'\r\n        break\r\n      case 301:\r\n      case 302:\r\n        return '/drizzle.svg'\r\n        break\r\n      case 310:\r\n      case 311:\r\n      case 312:\r\n      case 313:\r\n      case 314:\r\n      case 321:\r\n        return '/rain.svg'\r\n        break\r\n      case 500:\r\n      case 501:\r\n      case 502:\r\n      case 503:\r\n      case 504:\r\n        return '/partly-cloudy-day-rain.svg'\r\n        break\r\n      case 511:\r\n        return '/snow.svg'\r\n        break\r\n      case 520:\r\n      case 521:\r\n      case 522:\r\n      case 531:\r\n        return '/rain.svg'\r\n        break\r\n      case 600:\r\n      case 601:\r\n        return '/partly-cloudy-day-snow.svg'\r\n        break\r\n      case 602:\r\n      case 611:\r\n      case 612:\r\n      case 613:\r\n      case 615:\r\n      case 616:\r\n      case 620:\r\n      case 621:\r\n      case 622:\r\n        return '/snow.svg'\r\n        break\r\n      case 701:\r\n        return '/mist.svg'\r\n        break\r\n      case 711:\r\n        return '/partly-cloudy-day-smoke.svg'\r\n        break\r\n      case 721:\r\n        return '/haze-day.svg'\r\n        break\r\n      case 731:\r\n        return '/dust-day.svg'\r\n        break\r\n      case 741:\r\n        return '/fog-day.svg'\r\n        break\r\n      case 751:\r\n      case 761:\r\n      case 762:\r\n        return '/dust-day.svg'\r\n        break\r\n      case 771:\r\n        return '/wind.svg'\r\n        break\r\n      case 781:\r\n        return '/tornado.svg'\r\n        break\r\n      case 800:\r\n        return '/clear-day.svg'\r\n        break\r\n      case 801:\r\n        return '/partly-cloudy-day.svg'\r\n        break\r\n      case 802:\r\n        // return '/cloudy.svg'\r\n        return '/partly-cloudy-day.svg'\r\n        break\r\n      case 803:\r\n      case 804:\r\n        return '/overcast-day.svg'\r\n        break\r\n      default:\r\n        return '/not-available.svg'\r\n    }\r\n  }\r\n\r\n  function getMoonPhaseSvg(phase) {\r\n    if (phase >= 0 && phase < 0.0625) {\r\n      return 'moon-new.svg'\r\n    } else if (phase >= 0.0625 && phase < 0.1875) {\r\n      return 'moon-waxing-crescent.svg'\r\n    } else if (phase >= 0.1875 && phase < 0.3125) {\r\n      return 'moon-first-quarter.svg'\r\n    } else if (phase >= 0.3125 && phase < 0.4375) {\r\n      return 'moon-waxing-gibbous.svg'\r\n    } else if (phase >= 0.4375 && phase < 0.5625) {\r\n      return 'moon-full.svg'\r\n    } else if (phase >= 0.5625 && phase < 0.6875) {\r\n      return 'moon-waning-gibbous.svg'\r\n    } else if (phase >= 0.6875 && phase < 0.8125) {\r\n      return 'moon-last-quarter.svg'\r\n    } else if (phase >= 0.8125 && phase < 0.9375) {\r\n      return 'moon-waning-crescent.svg'\r\n    } else if (phase >= 0.9375 && phase <= 1) {\r\n      return 'moon-new.svg'\r\n    } else return 'not-available.svg'\r\n  }\r\n\r\n  function getMoonPhase(phase) {\r\n    if (phase >= 0 && phase < 0.0625) {\r\n      return 'New Moon'\r\n    } else if (phase >= 0.0625 && phase < 0.1875) {\r\n      return 'Waxing Crescent'\r\n    } else if (phase >= 0.1875 && phase < 0.3125) {\r\n      return 'First Quarter'\r\n    } else if (phase >= 0.3125 && phase < 0.4375) {\r\n      return 'Waxing Gibbous'\r\n    } else if (phase >= 0.4375 && phase < 0.5625) {\r\n      return 'Full Moon'\r\n    } else if (phase >= 0.5625 && phase < 0.6875) {\r\n      return 'Waning Gibbous'\r\n    } else if (phase >= 0.6875 && phase < 0.8125) {\r\n      return 'Last Quarter'\r\n    } else if (phase >= 0.8125 && phase < 0.9375) {\r\n      return 'Waning Crescent'\r\n    } else if (phase >= 0.9375 && phase <= 1) {\r\n      return 'New Moon'\r\n    } else return ''\r\n  }\r\n\r\n  function getUVindexSVG(index) {\r\n    switch (index) {\r\n      case 0:\r\n      case 1:\r\n        return 'uv-index-1.svg'\r\n        break\r\n      case 2:\r\n        return 'uv-index-2.svg'\r\n        break\r\n      case 3:\r\n        return 'uv-index-3.svg'\r\n        break\r\n      case 4:\r\n        return 'uv-index-4.svg'\r\n        break\r\n      case 5:\r\n        return 'uv-index-5.svg'\r\n        break\r\n      case 6:\r\n        return 'uv-index-6.svg'\r\n        break\r\n      case 7:\r\n        return 'uv-index-7.svg'\r\n        break\r\n      case 8:\r\n        return 'uv-index-8.svg'\r\n        break\r\n      case 9:\r\n        return 'uv-index-9.svg'\r\n        break\r\n      case 10:\r\n        return 'uv-index-10.svg'\r\n        break\r\n      case 11:\r\n      case 12:\r\n      case 13:\r\n      case 14:\r\n      case 15:\r\n      case 16:\r\n      case 17:\r\n      case 18:\r\n      case 19:\r\n      case 20:\r\n        return 'uv-index-11.svg'\r\n        break\r\n      default:\r\n        return 'not-available.svg'\r\n    }\r\n  }\r\n\r\n  function getUVindex(index) {\r\n    switch (index) {\r\n      case 0:\r\n      case 1:\r\n        return '1 (low)'\r\n        break\r\n      case 2:\r\n        return '2 (low)'\r\n        break\r\n      case 3:\r\n        return '3 (moderate)'\r\n        break\r\n      case 4:\r\n        return '4 (moderate)'\r\n        break\r\n      case 5:\r\n        return '5 (moderate)'\r\n        break\r\n      case 6:\r\n        return '6 (high)'\r\n        break\r\n      case 7:\r\n        return '7 (high)'\r\n        break\r\n      case 8:\r\n        return '8 (very high)'\r\n        break\r\n      case 9:\r\n        return '9 (very high)'\r\n        break\r\n      case 10:\r\n        return '10 (very high)'\r\n        break\r\n      case 11:\r\n        return '11 (extreme)'\r\n        break\r\n      case 12:\r\n      case 13:\r\n      case 14:\r\n      case 15:\r\n      case 16:\r\n      case 17:\r\n      case 18:\r\n      case 19:\r\n      case 20:\r\n        return '11+ (extreme)'\r\n        break\r\n      default:\r\n        return 'not-available.svg'\r\n    }\r\n  }\r\n\r\n  function getWindSpeedSvg(speed) {\r\n    switch (speed) {\r\n      case 0:\r\n      case 1:\r\n        return 'wind-beaufort-1.svg'\r\n        break\r\n      case 2:\r\n        return 'wind-beaufort-2.svg'\r\n        break\r\n      case 3:\r\n        return 'wind-beaufort-3.svg'\r\n        break\r\n      case 4:\r\n        return 'wind-beaufort-4.svg'\r\n        break\r\n      case 5:\r\n        return 'wind-beaufort-5.svg'\r\n        break\r\n      case 6:\r\n        return 'wind-beaufort-6.svg'\r\n        break\r\n      case 7:\r\n        return 'wind-beaufort-7.svg'\r\n        break\r\n      case 8:\r\n        return 'wind-beaufort-8.svg'\r\n        break\r\n      case 9:\r\n        return 'wind-beaufort-9.svg'\r\n        break\r\n      case 10:\r\n        return 'wind-beaufort-10.svg'\r\n        break\r\n      case 11:\r\n        return 'wind-beaufort-11.svg'\r\n        break\r\n      case 12:\r\n      case 13:\r\n      case 14:\r\n      case 15:\r\n      case 16:\r\n      case 17:\r\n      case 18:\r\n      case 19:\r\n      case 20:\r\n        return 'wind-beaufort-12.svg'\r\n        break\r\n      default:\r\n        return 'not-available.svg'\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    data.name\r\n      ? (document.title = `Weather - ${data.name}`)\r\n      : (document.title = 'Weather')\r\n  }, [data.name])\r\n\r\n  return (\r\n    <Box sx={{ mt: 14 }}>\r\n      <Container maxwidth=\"sm\">\r\n        {!data.main ? (\r\n          <Typography\r\n            variant=\"h3\"\r\n            component=\"div\"\r\n            sx={({ flexGrow: 1 }, { textAlign: 'center' })}\r\n          >\r\n            <b>Enter the name of the city</b>\r\n          </Typography>\r\n        ) : null}\r\n        <Box\r\n          sx={{ mt: 5 }}\r\n          display=\"flex\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Box>\r\n            <IconButton\r\n              onClick={getLocation}\r\n              color=\"inherit\"\r\n              size=\"large\"\r\n              title=\"My location\"\r\n            >\r\n              <GpsFixedIcon style={{ fontSize: 30 }} />\r\n            </IconButton>\r\n          </Box>\r\n          <Search>\r\n            <SearchIconWrapper>\r\n              <SearchIcon />\r\n            </SearchIconWrapper>\r\n            <StyledInputBase\r\n              placeholder=\"Search\"\r\n              inputProps={{ 'aria-label': 'search' }}\r\n              value={location}\r\n              onChange={(event) => setLocation(event.target.value)}\r\n              onKeyPress={searchLocation}\r\n            />\r\n          </Search>\r\n          <Box>\r\n            {error ? (\r\n              <Snackbar\r\n                open={open}\r\n                autoHideDuration={3000}\r\n                onClose={handleClose}\r\n              >\r\n                <Alert\r\n                  onClose={handleClose}\r\n                  severity=\"error\"\r\n                  sx={{ width: '100%' }}\r\n                >\r\n                  Enter the correct name!\r\n                </Alert>\r\n              </Snackbar>\r\n            ) : null}\r\n          </Box>\r\n        </Box>\r\n        <br />\r\n        <br />\r\n\r\n        {data.main ? (\r\n          <Box>\r\n            <Typography\r\n              variant=\"h6\"\r\n              component=\"div\"\r\n              sx={\r\n                ({ flexGrow: 1 }, { textAlign: 'center', fontWeight: 'light' })\r\n              }\r\n              color=\"textSecondary\"\r\n            >\r\n              {todayDate}\r\n            </Typography>\r\n            <br />\r\n            <br />\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justifyContent=\"center\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid\r\n                item\r\n                xs={12}\r\n                md={3}\r\n                sx={({ flexGrow: 1 }, { textAlign: 'center' })}\r\n              >\r\n                <Box sx={{ display: { xs: 'none', md: 'block' } }}>\r\n                  {celsius ? (\r\n                    <IconButton\r\n                      onClick={() => setCelsius((prev) => !prev)}\r\n                      color=\"inherit\"\r\n                      size=\"large\"\r\n                      title=\"Change to °F\"\r\n                    >\r\n                      <Button style={style} fontSize=\"inherit\" color=\"inherit\">\r\n                        <h1>°F</h1>\r\n                      </Button>\r\n                    </IconButton>\r\n                  ) : (\r\n                    <IconButton\r\n                      onClick={() => setCelsius((prev) => !prev)}\r\n                      color=\"inherit\"\r\n                      size=\"large\"\r\n                      title=\"Change to °C\"\r\n                    >\r\n                      <Button style={style} fontSize=\"inherit\" color=\"inherit\">\r\n                        <h1>°C</h1>\r\n                      </Button>\r\n                    </IconButton>\r\n                  )}\r\n                </Box>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                xs={12}\r\n                md={6}\r\n                sx={({ flexGrow: 1 }, { textAlign: 'center' })}\r\n              >\r\n                <Box>\r\n                  <Box>\r\n                    <Box>\r\n                      {data.main ? (\r\n                        <Grid\r\n                          container\r\n                          direction=\"row\"\r\n                          justifyContent=\"center\"\r\n                          alignItems=\"center\"\r\n                        >\r\n                          <Box sx={{ width: '30px', height: '20px' }}>\r\n                            <img\r\n                              alt=\"flag\"\r\n                              src={`${flagsUrl}/${data.sys?.country}.svg`}\r\n                              width=\"30px\"\r\n                              height=\"20px\"\r\n                              title={data.sys?.country}\r\n                              draggable={false}\r\n                              class=\"shadow\"\r\n                            />\r\n                          </Box>\r\n                        </Grid>\r\n                      ) : null}\r\n                    </Box>\r\n                    <Typography\r\n                      variant=\"h2\"\r\n                      component=\"div\"\r\n                      sx={{ flexGrow: 1, textAlign: 'center' }}\r\n                    >\r\n                      <Box sx={{ letterSpacing: 5 }}>\r\n                        <b>{data.name.toUpperCase()}</b>\r\n                      </Box>\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"h6\"\r\n                      component=\"div\"\r\n                      sx={{\r\n                        flexGrow: 1,\r\n                        textAlign: 'center',\r\n                        fontWeight: 'regular',\r\n                      }}\r\n                      color=\"textSecondary\"\r\n                    >\r\n                      <Box sx={{ letterSpacing: 5 }}>\r\n                        {data.weather[0].description.toUpperCase()}\r\n                      </Box>\r\n                      {/* <Box sx={{ letterSpacing: 5 }}>\r\n                        {forecast.current.weather[0].description.toUpperCase()}\r\n                      </Box> */}\r\n                    </Typography>\r\n                  </Box>\r\n                  <br />\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                  >\r\n                    <Typography\r\n                      variant=\"h1\"\r\n                      component=\"div\"\r\n                      sx={({ flexGrow: 1 }, { textAlign: 'center' })}\r\n                    >\r\n                      {celsius ? (\r\n                        <>{data.main.temp.toFixed() - 273}°</>\r\n                      ) : (\r\n                        <>\r\n                          {(\r\n                            ((data.main.temp.toFixed() - 273) * 9) / 5 +\r\n                            32\r\n                          ).toFixed()}\r\n                          °\r\n                        </>\r\n                      )}\r\n                    </Typography>\r\n                    <Box sx={{ ml: -10, mr: -12 }}>\r\n                      <img\r\n                        src={`${weatherIconsUrl}${getCurrentIconUrl(\r\n                          forecast?.current?.weather[0]?.id\r\n                        )}`}\r\n                        alt=\"weather\"\r\n                        height=\"40%\"\r\n                        width=\"40%\"\r\n                        draggable={false}\r\n                        class=\"shadow\"\r\n                      />\r\n                    </Box>\r\n                  </Grid>\r\n                  <Typography\r\n                    variant=\"h6\"\r\n                    component=\"div\"\r\n                    sx={{\r\n                      flexGrow: 1,\r\n                      textAlign: 'center',\r\n                      fontWeight: 'regular',\r\n                    }}\r\n                    color=\"textSecondary\"\r\n                  >\r\n                    <Box>\r\n                      <>\r\n                        Feels like{' '}\r\n                        {celsius ? (\r\n                          <>{data.main.feels_like.toFixed() - 273}°</>\r\n                        ) : (\r\n                          <>\r\n                            {(\r\n                              ((data.main.feels_like.toFixed() - 273) * 9) / 5 +\r\n                              32\r\n                            ).toFixed()}\r\n                            °\r\n                          </>\r\n                        )}\r\n                      </>\r\n                    </Box>\r\n                  </Typography>\r\n                </Box>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                xs={12}\r\n                md={3}\r\n                sx={({ flexGrow: 1 }, { textAlign: 'center' })}\r\n              >\r\n                <Box sx={{ display: { xs: 'none', md: 'block' } }}>\r\n                  {/* <IconButton onClick={clearData} color=\"inherit\" title=\"Clear\">\r\n                    <CloseIcon style={{ fontSize: 40 }} />\r\n                  </IconButton> */}\r\n                  {/* <IconButton\r\n                    // onClick={refreshLocation}\r\n                    color=\"inherit\"\r\n                    title=\"Refresh\"\r\n                  >\r\n                    <RefreshIcon style={{ fontSize: 40 }} />\r\n                  </IconButton> */}\r\n                </Box>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Box sx={{ display: { xs: 'block', md: 'none' } }}>\r\n              <Stack justifyContent=\"center\" direction=\"row\" spacing={5}>\r\n                {celsius ? (\r\n                  <IconButton\r\n                    onClick={() => setCelsius((prev) => !prev)}\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    title=\"Change to °F\"\r\n                  >\r\n                    <Button style={style} fontSize=\"inherit\" color=\"inherit\">\r\n                      <h1>°F</h1>\r\n                    </Button>\r\n                  </IconButton>\r\n                ) : (\r\n                  <IconButton\r\n                    onClick={() => setCelsius((prev) => !prev)}\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    title=\"Change to °C\"\r\n                  >\r\n                    <Button style={style} fontSize=\"inherit\" color=\"inherit\">\r\n                      <h1>°C</h1>\r\n                    </Button>\r\n                  </IconButton>\r\n                )}\r\n                <IconButton onClick={clearData} color=\"inherit\" title=\"Clear\">\r\n                  <CloseIcon style={{ fontSize: 40 }} />\r\n                </IconButton>\r\n              </Stack>\r\n              <br />\r\n            </Box>\r\n            <br />\r\n            <br />\r\n            <Divider sx={{ borderBottomWidth: 2, width: '100%' }} />\r\n            <br />\r\n            <Box sx={{ display: { xs: 'none', md: 'block' } }}>\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                textAlign=\"center\"\r\n                columns={14}\r\n              >\r\n                <Grid item xs={2}>\r\n                  <Grid\r\n                    container\r\n                    direction=\"column\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                    textAlign=\"center\"\r\n                  >\r\n                    <Grid\r\n                      container\r\n                      direction=\"row\"\r\n                      justifyContent=\"left\"\r\n                      alignItems=\"center\"\r\n                      textAlign=\"center\"\r\n                    >\r\n                      <img\r\n                        src={`${weatherFillIconsUrl}/${getWindSpeedSvg(\r\n                          +data.wind.speed.toFixed()\r\n                        )}`}\r\n                        alt=\"weather\"\r\n                        height=\"40px\"\r\n                        width=\"40px\"\r\n                        draggable={false}\r\n                        class=\"shadow\"\r\n                      />\r\n                      <Typography variant=\"p\" color=\"textSecondary\">\r\n                        &nbsp;{data.wind.speed.toFixed()} m/s,{' '}\r\n                        {getDirection(data.wind.deg)}\r\n                      </Typography>{' '}\r\n                      <img\r\n                        src={`${weatherIconsUrl}/compass.svg`}\r\n                        alt=\"weather\"\r\n                        height=\"40px\"\r\n                        width=\"40px\"\r\n                        draggable={false}\r\n                        class=\"shadow\"\r\n                        style={{ transform: `rotate(${degree + 180}deg` }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid\r\n                      container\r\n                      direction=\"row\"\r\n                      justifyContent=\"left\"\r\n                      alignItems=\"center\"\r\n                      textAlign=\"center\"\r\n                    >\r\n                      <img\r\n                        src={`${weatherIconsUrl}/barometer.svg`}\r\n                        alt=\"weather\"\r\n                        height=\"40px\"\r\n                        width=\"40px\"\r\n                        draggable={false}\r\n                        class=\"shadow\"\r\n                      />\r\n\r\n                      <Typography variant=\"p\" color=\"textSecondary\">\r\n                        {data.main ? <>&nbsp;{data.main.pressure} hPa</> : null}\r\n                      </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid\r\n                      container\r\n                      direction=\"row\"\r\n                      justifyContent=\"left\"\r\n                      alignItems=\"center\"\r\n                      textAlign=\"center\"\r\n                    >\r\n                      <img\r\n                        src={`${weatherFillIconsUrl}/raindrops.svg`}\r\n                        alt=\"weather\"\r\n                        height=\"40px\"\r\n                        width=\"40px\"\r\n                        draggable={false}\r\n                        class=\"shadow\"\r\n                      />\r\n                      <Typography variant=\"p\" color=\"textSecondary\">\r\n                        {data.main ? <>&nbsp;{data.main.humidity} %</> : null}\r\n                      </Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <Carousel\r\n                    // easing=\"cubic-bezier(1,.15,.55,1.54)\"\r\n                    // tiltEasing=\"cubic-bezier(0.110, 1, 1.000, 0.210)\"\r\n                    // transitionMs={700}\r\n                    initialActiveIndex={0}\r\n                    itemsToScroll={2}\r\n                    itemsToShow={8}\r\n                  >\r\n                    <Grid\r\n                      container\r\n                      direction=\"column\"\r\n                      justifyContent=\"center\"\r\n                      alignItems=\"center\"\r\n                    >\r\n                      <Typography\r\n                        variant=\"h6\"\r\n                        color=\"textSecondary\"\r\n                        sx={{ fontWeight: 'regular' }}\r\n                      >\r\n                        Now\r\n                      </Typography>\r\n                      <img\r\n                        src={`${weatherIconsUrl}${getCurrentIconUrl(\r\n                          forecast?.current?.weather[0]?.id\r\n                        )}`}\r\n                        alt=\"weather\"\r\n                        height=\"42%\"\r\n                        width=\"42%\"\r\n                        draggable={false}\r\n                        class=\"shadow\"\r\n                      />\r\n                      {/* <br /> */}\r\n                      <Typography variant=\"h5\">\r\n                        {celsius ? (\r\n                          <b>{forecast.hourly[0].temp.toFixed() - 273}°</b>\r\n                        ) : (\r\n                          <b>\r\n                            {(\r\n                              ((forecast.hourly[0].temp.toFixed() - 273) * 9) /\r\n                                5 +\r\n                              32\r\n                            ).toFixed()}\r\n                            °\r\n                          </b>\r\n                        )}\r\n                      </Typography>\r\n                    </Grid>\r\n                    {[\r\n                      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\r\n                      17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\r\n                    ].map((i) => (\r\n                      <Grid\r\n                        container\r\n                        direction=\"column\"\r\n                        justifyContent=\"center\"\r\n                        alignItems=\"center\"\r\n                        key={hourlyForecast[i].dt}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'regular' }}\r\n                        >\r\n                          <>{getTimeFromUnix(i, forecast.timezone)}</>\r\n                        </Typography>\r\n                        <img\r\n                          src={`${weatherIconsUrl}${getHourlyIconUrl(\r\n                            hourlyForecast[i]?.weather[0]?.id,\r\n                            i\r\n                          )}`}\r\n                          alt=\"weather\"\r\n                          height=\"42%\"\r\n                          width=\"42%\"\r\n                          draggable={false}\r\n                          class=\"shadow\"\r\n                        />\r\n                        {/* <br /> */}\r\n                        <Stack\r\n                          justifyContent=\"center\"\r\n                          direction=\"row\"\r\n                          spacing={2}\r\n                        >\r\n                          <Typography variant=\"h5\">\r\n                            {hourlyForecast[i]?.temp === 995 ? (\r\n                              <Typography\r\n                                variant=\"h6\"\r\n                                color=\"textSecondary\"\r\n                                sx={{ fontWeight: 'regular' }}\r\n                              >\r\n                                Sunrise\r\n                              </Typography>\r\n                            ) : null}\r\n                            {hourlyForecast[i]?.temp === 999 ? (\r\n                              <Typography\r\n                                variant=\"h6\"\r\n                                color=\"textSecondary\"\r\n                                sx={{ fontWeight: 'regular' }}\r\n                              >\r\n                                Sunset\r\n                              </Typography>\r\n                            ) : null}\r\n                            {hourlyForecast[i]?.temp < 990 ? (\r\n                              <>\r\n                                {celsius ? (\r\n                                  <b>\r\n                                    {hourlyForecast[i]?.temp?.toFixed() - 273}°\r\n                                  </b>\r\n                                ) : (\r\n                                  <b>\r\n                                    {(\r\n                                      ((hourlyForecast[i]?.temp?.toFixed() -\r\n                                        273) *\r\n                                        9) /\r\n                                        5 +\r\n                                      32\r\n                                    ).toFixed()}\r\n                                    °\r\n                                  </b>\r\n                                )}\r\n                              </>\r\n                            ) : null}\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                    ))}\r\n                  </Carousel>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n            <br />\r\n            <Divider sx={{ borderBottomWidth: 2, width: '100%' }} />\r\n            <Box>\r\n              <Accordion\r\n                expanded={expanded === 'panel0'}\r\n                onChange={handleChange('panel0')}\r\n              >\r\n                <AccordionSummary\r\n                  aria-controls=\"panel0d-content\"\r\n                  id=\"panel0d-header\"\r\n                >\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                    columns={9}\r\n                  >\r\n                    <Grid item xs={7}>\r\n                      <Box sx={{ ml: 3 }}>\r\n                        <Grid\r\n                          container\r\n                          direction=\"column\"\r\n                          justifyContent=\"center\"\r\n                          alignItems=\"left\"\r\n                        >\r\n                          <Grid item>\r\n                            <Typography variant=\"h5\" color=\"textPrimary\">\r\n                              <b>Today</b>\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid item>\r\n                            <Typography\r\n                              variant=\"h6\"\r\n                              color=\"textSecondary\"\r\n                              sx={{ fontWeight: 'light' }}\r\n                            >\r\n                              <>{getDateFromUnix(0)}</>\r\n                            </Typography>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </Box>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <img\r\n                          src={`${weatherIconsUrl}${getIconUrl(\r\n                            forecast?.daily[0]?.weather[0]?.id\r\n                          )}`}\r\n                          alt=\"weather\"\r\n                          height=\"60px\"\r\n                          width=\"60px\"\r\n                          draggable={false}\r\n                          class=\"shadow\"\r\n                        />\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography variant=\"h5\">\r\n                          {celsius ? (\r\n                            <b>{forecast.daily[0].temp.day.toFixed() - 273}°</b>\r\n                          ) : (\r\n                            <b>\r\n                              {(\r\n                                ((forecast.daily[0].temp.day.toFixed() - 273) *\r\n                                  9) /\r\n                                  5 +\r\n                                32\r\n                              ).toFixed()}\r\n                              °\r\n                            </b>\r\n                          )}\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" color=\"textSecondary\">\r\n                          {celsius ? (\r\n                            <b>\r\n                              {forecast.daily[0].temp.night.toFixed() - 273}°\r\n                            </b>\r\n                          ) : (\r\n                            <b>\r\n                              {(\r\n                                ((forecast.daily[0].temp.night.toFixed() -\r\n                                  273) *\r\n                                  9) /\r\n                                  5 +\r\n                                32\r\n                              ).toFixed()}\r\n                              °\r\n                            </b>\r\n                          )}\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                  </Grid>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                    columns={9}\r\n                    sx={{ pl: 4, height: '65px' }}\r\n                  >\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          Wind speed\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"column\"\r\n                        spacing={0}\r\n                      >\r\n                        <img\r\n                          src={`${weatherFillIconsUrl}/${getWindSpeedSvg(\r\n                            +forecast.daily[0].wind_speed.toFixed()\r\n                          )}`}\r\n                          alt=\"weather\"\r\n                          height=\"50px\"\r\n                          width=\"50px\"\r\n                          draggable={false}\r\n                          class=\"shadow\"\r\n                        />\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"left\"\r\n                        direction=\"row\"\r\n                        spacing={1}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          {/* {forecast.daily[0].wind_speed.toFixed(1)} m/s\r\n                           */}\r\n                          {forecast.daily[0].wind_speed.toFixed()} m/s,{' '}\r\n                          {getDirection(forecast.daily[0].wind_deg)}\r\n                        </Typography>\r\n                        <img\r\n                          src={`${weatherIconsUrl}/compass.svg`}\r\n                          alt=\"weather\"\r\n                          height=\"40px\"\r\n                          width=\"40px\"\r\n                          draggable={false}\r\n                          class=\"shadow\"\r\n                          style={{\r\n                            transform: `rotate(${\r\n                              forecast.daily[0].wind_deg + 180\r\n                            }deg`,\r\n                          }}\r\n                        />\r\n                      </Stack>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          Morning\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography variant=\"h5\">\r\n                          {celsius ? (\r\n                            <b>\r\n                              {forecast.daily[0].temp.morn.toFixed() - 273}°\r\n                            </b>\r\n                          ) : (\r\n                            <b>\r\n                              {(\r\n                                ((forecast.daily[0].temp.morn.toFixed() - 273) *\r\n                                  9) /\r\n                                  5 +\r\n                                32\r\n                              ).toFixed()}\r\n                              °\r\n                            </b>\r\n                          )}\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                    columns={9}\r\n                    sx={{ pl: 4, height: '65px' }}\r\n                  >\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          Pressure\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"column\"\r\n                        spacing={0}\r\n                      >\r\n                        <img\r\n                          src={`${weatherIconsUrl}/barometer.svg`}\r\n                          alt=\"weather\"\r\n                          height=\"50px\"\r\n                          width=\"50px\"\r\n                          draggable={false}\r\n                          class=\"shadow\"\r\n                        />\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"left\"\r\n                        direction=\"row\"\r\n                        spacing={1}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          {forecast.daily[0].pressure} hPa\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          Day\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography variant=\"h5\">\r\n                          {celsius ? (\r\n                            <b>{forecast.daily[0].temp.day.toFixed() - 273}°</b>\r\n                          ) : (\r\n                            <b>\r\n                              {(\r\n                                ((forecast.daily[0].temp.day.toFixed() - 273) *\r\n                                  9) /\r\n                                  5 +\r\n                                32\r\n                              ).toFixed()}\r\n                              °\r\n                            </b>\r\n                          )}\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                    columns={9}\r\n                    sx={{ pl: 4, height: '65px' }}\r\n                  >\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          Humidity\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"column\"\r\n                        spacing={0}\r\n                      >\r\n                        <img\r\n                          src={`${weatherFillIconsUrl}/raindrops.svg`}\r\n                          alt=\"weather\"\r\n                          height=\"50px\"\r\n                          width=\"50px\"\r\n                          draggable={false}\r\n                          class=\"shadow\"\r\n                        />\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"left\"\r\n                        direction=\"row\"\r\n                        spacing={1}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          {forecast.daily[0].humidity} %\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          Evening\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography variant=\"h5\">\r\n                          {celsius ? (\r\n                            <b>{forecast.daily[0].temp.eve.toFixed() - 273}°</b>\r\n                          ) : (\r\n                            <b>\r\n                              {(\r\n                                ((forecast.daily[0].temp.eve.toFixed() - 273) *\r\n                                  9) /\r\n                                  5 +\r\n                                32\r\n                              ).toFixed()}\r\n                              °\r\n                            </b>\r\n                          )}\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                    columns={9}\r\n                    sx={{ pl: 4, height: '65px' }}\r\n                  >\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          UV index\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"column\"\r\n                        spacing={0}\r\n                      >\r\n                        <img\r\n                          src={`${weatherIconsUrl}/${getUVindexSVG(\r\n                            +forecast.daily[0].uvi.toFixed()\r\n                          )}`}\r\n                          alt=\"weather\"\r\n                          height=\"50px\"\r\n                          width=\"50px\"\r\n                          draggable={false}\r\n                          class=\"shadow\"\r\n                        />\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"left\"\r\n                        direction=\"row\"\r\n                        spacing={1}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          {getUVindex(+forecast.daily[0].uvi.toFixed())}\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          Night\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography variant=\"h5\">\r\n                          {celsius ? (\r\n                            <b>\r\n                              {forecast.daily[0].temp.night.toFixed() - 273}°\r\n                            </b>\r\n                          ) : (\r\n                            <b>\r\n                              {(\r\n                                ((forecast.daily[0].temp.night.toFixed() -\r\n                                  273) *\r\n                                  9) /\r\n                                  5 +\r\n                                32\r\n                              ).toFixed()}\r\n                              °\r\n                            </b>\r\n                          )}\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                    columns={9}\r\n                    sx={{ pl: 4, height: '65px' }}\r\n                  >\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          Moon Phase\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"column\"\r\n                        spacing={0}\r\n                      >\r\n                        <img\r\n                          src={`${weatherFillIconsUrl}/${getMoonPhaseSvg(\r\n                            forecast.daily[0].moon_phase\r\n                          )}`}\r\n                          alt=\"weather\"\r\n                          height=\"50px\"\r\n                          width=\"50px\"\r\n                          draggable={false}\r\n                          class=\"shadow\"\r\n                        />\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"left\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          {getMoonPhase(forecast.daily[0].moon_phase)}\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                  </Grid>\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                    columns={9}\r\n                    sx={{ pl: 4 }}\r\n                  >\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        // direction=\"row\"\r\n                        direction=\"column\"\r\n                        spacing={0}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          Sunrise\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"column\"\r\n                        spacing={0}\r\n                      >\r\n                        <Box sx={{ mb: -2 }}>\r\n                          <img\r\n                            src={`${weatherIconsUrl}/sunrise.svg`}\r\n                            alt=\"weather\"\r\n                            height=\"50px\"\r\n                            width=\"50px\"\r\n                            draggable={false}\r\n                            class=\"shadow\"\r\n                          />\r\n                        </Box>\r\n                        <Typography\r\n                          variant=\"p\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'medium' }}\r\n                        >\r\n                          {getTimeFromDailyUnix(\r\n                            forecast.daily[0].sunrise,\r\n                            forecast.timezone\r\n                          )}\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"column\"\r\n                        spacing={0}\r\n                      >\r\n                        <Box sx={{ mb: -2 }}>\r\n                          <img\r\n                            src={`${weatherIconsUrl}/sunset.svg`}\r\n                            alt=\"weather\"\r\n                            height=\"50px\"\r\n                            width=\"50px\"\r\n                            draggable={false}\r\n                            class=\"shadow\"\r\n                          />\r\n                        </Box>\r\n                        <Typography\r\n                          variant=\"p\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'medium' }}\r\n                        >\r\n                          {getTimeFromDailyUnix(\r\n                            forecast.daily[0].sunset,\r\n                            forecast.timezone\r\n                          )}\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        // direction=\"row\"\r\n                        direction=\"column\"\r\n                        spacing={0}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          Sunset\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                  </Grid>\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                    columns={9}\r\n                    sx={{ pl: 4 }}\r\n                  >\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          Moonrise\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"column\"\r\n                        spacing={0}\r\n                      >\r\n                        <Box sx={{ mb: -2 }}>\r\n                          <img\r\n                            src={`${weatherIconsUrl}/moonrise.svg`}\r\n                            alt=\"weather\"\r\n                            height=\"50px\"\r\n                            width=\"50px\"\r\n                            draggable={false}\r\n                            class=\"shadow\"\r\n                          />\r\n                        </Box>\r\n                        <Typography\r\n                          variant=\"p\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'medium' }}\r\n                        >\r\n                          {getTimeFromDailyUnix(\r\n                            forecast.daily[0].moonrise,\r\n                            forecast.timezone\r\n                          )}\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"column\"\r\n                        spacing={0}\r\n                      >\r\n                        <Box sx={{ mb: -2 }}>\r\n                          <img\r\n                            src={`${weatherIconsUrl}/moonset.svg`}\r\n                            alt=\"weather\"\r\n                            height=\"50px\"\r\n                            width=\"50px\"\r\n                            draggable={false}\r\n                            class=\"shadow\"\r\n                          />\r\n                        </Box>\r\n                        <Typography\r\n                          variant=\"p\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'medium' }}\r\n                        >\r\n                          {getTimeFromDailyUnix(\r\n                            forecast.daily[0].moonset,\r\n                            forecast.timezone\r\n                          )}\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        // direction=\"row\"\r\n                        direction=\"column\"\r\n                        spacing={0}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          Moonset\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                  </Grid>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n              <Accordion\r\n                expanded={expanded === 'panel1'}\r\n                onChange={handleChange('panel1')}\r\n              >\r\n                <AccordionSummary\r\n                  aria-controls=\"panel1d-content\"\r\n                  id=\"panel1d-header\"\r\n                >\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                    columns={9}\r\n                  >\r\n                    <Grid item xs={7}>\r\n                      <Box sx={{ ml: 3 }}>\r\n                        <Grid\r\n                          container\r\n                          direction=\"column\"\r\n                          justifyContent=\"center\"\r\n                          alignItems=\"left\"\r\n                        >\r\n                          <Grid item>\r\n                            <Typography variant=\"h5\" color=\"textPrimary\">\r\n                              <b>Tomorrow</b>\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid item>\r\n                            <Typography\r\n                              variant=\"h6\"\r\n                              color=\"textSecondary\"\r\n                              sx={{ fontWeight: 'light' }}\r\n                            >\r\n                              <>{getDateFromUnix(1)}</>\r\n                            </Typography>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </Box>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <img\r\n                          src={`${weatherIconsUrl}${getIconUrl(\r\n                            forecast?.daily[1]?.weather[0]?.id\r\n                          )}`}\r\n                          alt=\"weather\"\r\n                          height=\"60px\"\r\n                          width=\"60px\"\r\n                          draggable={false}\r\n                          class=\"shadow\"\r\n                        />\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography variant=\"h5\">\r\n                          {celsius ? (\r\n                            <b>{forecast.daily[1].temp.day.toFixed() - 273}°</b>\r\n                          ) : (\r\n                            <b>\r\n                              {(\r\n                                ((forecast.daily[1].temp.day.toFixed() - 273) *\r\n                                  9) /\r\n                                  5 +\r\n                                32\r\n                              ).toFixed()}\r\n                              °\r\n                            </b>\r\n                          )}\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" color=\"textSecondary\">\r\n                          {celsius ? (\r\n                            <b>\r\n                              {forecast.daily[1].temp.night.toFixed() - 273}°\r\n                            </b>\r\n                          ) : (\r\n                            <b>\r\n                              {(\r\n                                ((forecast.daily[1].temp.night.toFixed() -\r\n                                  273) *\r\n                                  9) /\r\n                                  5 +\r\n                                32\r\n                              ).toFixed()}\r\n                              °\r\n                            </b>\r\n                          )}\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                  </Grid>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                    columns={9}\r\n                    sx={{ pl: 4, height: '65px' }}\r\n                  >\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          Wind speed\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"column\"\r\n                        spacing={0}\r\n                      >\r\n                        <img\r\n                          src={`${weatherFillIconsUrl}/${getWindSpeedSvg(\r\n                            +forecast.daily[1].wind_speed.toFixed()\r\n                          )}`}\r\n                          alt=\"weather\"\r\n                          height=\"50px\"\r\n                          width=\"50px\"\r\n                          draggable={false}\r\n                          class=\"shadow\"\r\n                        />\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"left\"\r\n                        direction=\"row\"\r\n                        spacing={1}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          {/* {forecast.daily[1].wind_speed.toFixed(1)} m/s\r\n                           */}\r\n                          {forecast.daily[1].wind_speed.toFixed()} m/s,{' '}\r\n                          {getDirection(forecast.daily[1].wind_deg)}\r\n                        </Typography>\r\n                        <img\r\n                          src={`${weatherIconsUrl}/compass.svg`}\r\n                          alt=\"weather\"\r\n                          height=\"40px\"\r\n                          width=\"40px\"\r\n                          draggable={false}\r\n                          class=\"shadow\"\r\n                          style={{\r\n                            transform: `rotate(${\r\n                              forecast.daily[1].wind_deg + 180\r\n                            }deg`,\r\n                          }}\r\n                        />\r\n                      </Stack>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          Morning\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography variant=\"h5\">\r\n                          {celsius ? (\r\n                            <b>\r\n                              {forecast.daily[1].temp.morn.toFixed() - 273}°\r\n                            </b>\r\n                          ) : (\r\n                            <b>\r\n                              {(\r\n                                ((forecast.daily[1].temp.morn.toFixed() - 273) *\r\n                                  9) /\r\n                                  5 +\r\n                                32\r\n                              ).toFixed()}\r\n                              °\r\n                            </b>\r\n                          )}\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                    columns={9}\r\n                    sx={{ pl: 4, height: '65px' }}\r\n                  >\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          Pressure\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"column\"\r\n                        spacing={0}\r\n                      >\r\n                        <img\r\n                          src={`${weatherIconsUrl}/barometer.svg`}\r\n                          alt=\"weather\"\r\n                          height=\"50px\"\r\n                          width=\"50px\"\r\n                          draggable={false}\r\n                          class=\"shadow\"\r\n                        />\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"left\"\r\n                        direction=\"row\"\r\n                        spacing={1}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          {forecast.daily[1].pressure} hPa\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          Day\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography variant=\"h5\">\r\n                          {celsius ? (\r\n                            <b>{forecast.daily[1].temp.day.toFixed() - 273}°</b>\r\n                          ) : (\r\n                            <b>\r\n                              {(\r\n                                ((forecast.daily[1].temp.day.toFixed() - 273) *\r\n                                  9) /\r\n                                  5 +\r\n                                32\r\n                              ).toFixed()}\r\n                              °\r\n                            </b>\r\n                          )}\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                    columns={9}\r\n                    sx={{ pl: 4, height: '65px' }}\r\n                  >\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          Humidity\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"column\"\r\n                        spacing={0}\r\n                      >\r\n                        <img\r\n                          src={`${weatherFillIconsUrl}/raindrops.svg`}\r\n                          alt=\"weather\"\r\n                          height=\"50px\"\r\n                          width=\"50px\"\r\n                          draggable={false}\r\n                          class=\"shadow\"\r\n                        />\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"left\"\r\n                        direction=\"row\"\r\n                        spacing={1}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          {forecast.daily[1].humidity} %\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          Evening\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography variant=\"h5\">\r\n                          {celsius ? (\r\n                            <b>{forecast.daily[1].temp.eve.toFixed() - 273}°</b>\r\n                          ) : (\r\n                            <b>\r\n                              {(\r\n                                ((forecast.daily[1].temp.eve.toFixed() - 273) *\r\n                                  9) /\r\n                                  5 +\r\n                                32\r\n                              ).toFixed()}\r\n                              °\r\n                            </b>\r\n                          )}\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                    columns={9}\r\n                    sx={{ pl: 4, height: '65px' }}\r\n                  >\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          UV index\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"column\"\r\n                        spacing={0}\r\n                      >\r\n                        <img\r\n                          src={`${weatherIconsUrl}/${getUVindexSVG(\r\n                            +forecast.daily[1].uvi.toFixed()\r\n                          )}`}\r\n                          alt=\"weather\"\r\n                          height=\"50px\"\r\n                          width=\"50px\"\r\n                          draggable={false}\r\n                          class=\"shadow\"\r\n                        />\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"left\"\r\n                        direction=\"row\"\r\n                        spacing={1}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          {getUVindex(+forecast.daily[1].uvi.toFixed())}\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          Night\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography variant=\"h5\">\r\n                          {celsius ? (\r\n                            <b>\r\n                              {forecast.daily[1].temp.night.toFixed() - 273}°\r\n                            </b>\r\n                          ) : (\r\n                            <b>\r\n                              {(\r\n                                ((forecast.daily[1].temp.night.toFixed() -\r\n                                  273) *\r\n                                  9) /\r\n                                  5 +\r\n                                32\r\n                              ).toFixed()}\r\n                              °\r\n                            </b>\r\n                          )}\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                    columns={9}\r\n                    sx={{ pl: 4, height: '65px' }}\r\n                  >\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          Moon Phase\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"column\"\r\n                        spacing={0}\r\n                      >\r\n                        <img\r\n                          src={`${weatherFillIconsUrl}/${getMoonPhaseSvg(\r\n                            forecast.daily[1].moon_phase\r\n                          )}`}\r\n                          alt=\"weather\"\r\n                          height=\"50px\"\r\n                          width=\"50px\"\r\n                          draggable={false}\r\n                          class=\"shadow\"\r\n                        />\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"left\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          {getMoonPhase(forecast.daily[1].moon_phase)}\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                  </Grid>\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                    columns={9}\r\n                    sx={{ pl: 4 }}\r\n                  >\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        // direction=\"row\"\r\n                        direction=\"column\"\r\n                        spacing={0}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          Sunrise\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"column\"\r\n                        spacing={0}\r\n                      >\r\n                        <Box sx={{ mb: -2 }}>\r\n                          <img\r\n                            src={`${weatherIconsUrl}/sunrise.svg`}\r\n                            alt=\"weather\"\r\n                            height=\"50px\"\r\n                            width=\"50px\"\r\n                            draggable={false}\r\n                            class=\"shadow\"\r\n                          />\r\n                        </Box>\r\n                        <Typography\r\n                          variant=\"p\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'medium' }}\r\n                        >\r\n                          {getTimeFromDailyUnix(\r\n                            forecast.daily[1].sunrise,\r\n                            forecast.timezone\r\n                          )}\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"column\"\r\n                        spacing={0}\r\n                      >\r\n                        <Box sx={{ mb: -2 }}>\r\n                          <img\r\n                            src={`${weatherIconsUrl}/sunset.svg`}\r\n                            alt=\"weather\"\r\n                            height=\"50px\"\r\n                            width=\"50px\"\r\n                            draggable={false}\r\n                            class=\"shadow\"\r\n                          />\r\n                        </Box>\r\n                        <Typography\r\n                          variant=\"p\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'medium' }}\r\n                        >\r\n                          {getTimeFromDailyUnix(\r\n                            forecast.daily[1].sunset,\r\n                            forecast.timezone\r\n                          )}\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        // direction=\"row\"\r\n                        direction=\"column\"\r\n                        spacing={0}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          Sunset\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                  </Grid>\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                    columns={9}\r\n                    sx={{ pl: 4 }}\r\n                  >\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          Moonrise\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"column\"\r\n                        spacing={0}\r\n                      >\r\n                        <Box sx={{ mb: -2 }}>\r\n                          <img\r\n                            src={`${weatherIconsUrl}/moonrise.svg`}\r\n                            alt=\"weather\"\r\n                            height=\"50px\"\r\n                            width=\"50px\"\r\n                            draggable={false}\r\n                            class=\"shadow\"\r\n                          />\r\n                        </Box>\r\n                        <Typography\r\n                          variant=\"p\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'medium' }}\r\n                        >\r\n                          {getTimeFromDailyUnix(\r\n                            forecast.daily[1].moonrise,\r\n                            forecast.timezone\r\n                          )}\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        direction=\"column\"\r\n                        spacing={0}\r\n                      >\r\n                        <Box sx={{ mb: -2 }}>\r\n                          <img\r\n                            src={`${weatherIconsUrl}/moonset.svg`}\r\n                            alt=\"weather\"\r\n                            height=\"50px\"\r\n                            width=\"50px\"\r\n                            draggable={false}\r\n                            class=\"shadow\"\r\n                          />\r\n                        </Box>\r\n                        <Typography\r\n                          variant=\"p\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'medium' }}\r\n                        >\r\n                          {getTimeFromDailyUnix(\r\n                            forecast.daily[1].moonset,\r\n                            forecast.timezone\r\n                          )}\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                      <Stack\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        // direction=\"row\"\r\n                        direction=\"column\"\r\n                        spacing={0}\r\n                      >\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textSecondary\"\r\n                          sx={{ fontWeight: 'light' }}\r\n                        >\r\n                          Moonset\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                  </Grid>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n              {[2, 3, 4, 5, 6, 7].map((i) => (\r\n                <Accordion\r\n                  expanded={expanded === `panel${i}`}\r\n                  onChange={handleChange(`panel${i}`)}\r\n                  key={forecast.daily[i].dt}\r\n                >\r\n                  <AccordionSummary\r\n                    aria-controls={`panel${i}d-content`}\r\n                    id={`panel${i}d-header`}\r\n                  >\r\n                    <Grid\r\n                      container\r\n                      direction=\"row\"\r\n                      justifyContent=\"center\"\r\n                      alignItems=\"center\"\r\n                      columns={9}\r\n                    >\r\n                      <Grid item xs={7}>\r\n                        <Box sx={{ ml: 3 }}>\r\n                          <Grid\r\n                            container\r\n                            direction=\"column\"\r\n                            justifyContent=\"center\"\r\n                            alignItems=\"left\"\r\n                          >\r\n                            <Grid item>\r\n                              <Typography variant=\"h5\" color=\"textPrimary\">\r\n                                <b>{getWeekdayFromUnix(i)}</b>\r\n                              </Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                              <Typography\r\n                                variant=\"h6\"\r\n                                color=\"textSecondary\"\r\n                                sx={{ fontWeight: 'light' }}\r\n                              >\r\n                                <>{getDateFromUnix(i)}</>\r\n                              </Typography>\r\n                            </Grid>\r\n                          </Grid>\r\n                        </Box>\r\n                      </Grid>\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          direction=\"row\"\r\n                          spacing={2}\r\n                        >\r\n                          <img\r\n                            src={`${weatherIconsUrl}${getIconUrl(\r\n                              forecast?.daily[i]?.weather[0]?.id\r\n                            )}`}\r\n                            alt=\"weather\"\r\n                            height=\"60px\"\r\n                            width=\"60px\"\r\n                            draggable={false}\r\n                            class=\"shadow\"\r\n                          />\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          direction=\"row\"\r\n                          spacing={2}\r\n                        >\r\n                          <Typography variant=\"h5\">\r\n                            {celsius ? (\r\n                              <b>\r\n                                {forecast.daily[i].temp.day.toFixed() - 273}°\r\n                              </b>\r\n                            ) : (\r\n                              <b>\r\n                                {(\r\n                                  ((forecast.daily[i].temp.day.toFixed() -\r\n                                    273) *\r\n                                    9) /\r\n                                    5 +\r\n                                  32\r\n                                ).toFixed()}\r\n                                °\r\n                              </b>\r\n                            )}\r\n                          </Typography>\r\n                          <Typography variant=\"h5\" color=\"textSecondary\">\r\n                            {celsius ? (\r\n                              <b>\r\n                                {forecast.daily[i].temp.night.toFixed() - 273}°\r\n                              </b>\r\n                            ) : (\r\n                              <b>\r\n                                {(\r\n                                  ((forecast.daily[i].temp.night.toFixed() -\r\n                                    273) *\r\n                                    9) /\r\n                                    5 +\r\n                                  32\r\n                                ).toFixed()}\r\n                                °\r\n                              </b>\r\n                            )}\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <Grid\r\n                      container\r\n                      direction=\"row\"\r\n                      justifyContent=\"center\"\r\n                      alignItems=\"center\"\r\n                      columns={9}\r\n                      sx={{ pl: 4, height: '65px' }}\r\n                    >\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          direction=\"row\"\r\n                          spacing={2}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h6\"\r\n                            color=\"textSecondary\"\r\n                            sx={{ fontWeight: 'light' }}\r\n                          >\r\n                            Wind speed\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          direction=\"column\"\r\n                          spacing={0}\r\n                        >\r\n                          <img\r\n                            src={`${weatherFillIconsUrl}/${getWindSpeedSvg(\r\n                              +forecast.daily[i].wind_speed.toFixed()\r\n                            )}`}\r\n                            alt=\"weather\"\r\n                            height=\"50px\"\r\n                            width=\"50px\"\r\n                            draggable={false}\r\n                            class=\"shadow\"\r\n                          />\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={2}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"left\"\r\n                          direction=\"row\"\r\n                          spacing={1}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h6\"\r\n                            color=\"textSecondary\"\r\n                            sx={{ fontWeight: 'light' }}\r\n                          >\r\n                            {/* {forecast.daily[i].wind_speed.toFixed(1)} m/s\r\n                             */}\r\n                            {forecast.daily[i].wind_speed.toFixed()} m/s,{' '}\r\n                            {getDirection(forecast.daily[i].wind_deg)}\r\n                          </Typography>\r\n                          <img\r\n                            src={`${weatherIconsUrl}/compass.svg`}\r\n                            alt=\"weather\"\r\n                            height=\"40px\"\r\n                            width=\"40px\"\r\n                            draggable={false}\r\n                            class=\"shadow\"\r\n                            style={{\r\n                              transform: `rotate(${\r\n                                forecast.daily[i].wind_deg + 180\r\n                              }deg`,\r\n                            }}\r\n                          />\r\n                        </Stack>\r\n                      </Grid>\r\n\r\n                      <Grid item xs={1}></Grid>\r\n                      <Grid item xs={1}></Grid>\r\n                      <Grid item xs={1}></Grid>\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          direction=\"row\"\r\n                          spacing={2}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h6\"\r\n                            color=\"textSecondary\"\r\n                            sx={{ fontWeight: 'light' }}\r\n                          >\r\n                            Morning\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          direction=\"row\"\r\n                          spacing={2}\r\n                        >\r\n                          <Typography variant=\"h5\">\r\n                            {celsius ? (\r\n                              <b>\r\n                                {forecast.daily[i].temp.morn.toFixed() - 273}°\r\n                              </b>\r\n                            ) : (\r\n                              <b>\r\n                                {(\r\n                                  ((forecast.daily[i].temp.morn.toFixed() -\r\n                                    273) *\r\n                                    9) /\r\n                                    5 +\r\n                                  32\r\n                                ).toFixed()}\r\n                                °\r\n                              </b>\r\n                            )}\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Grid\r\n                      container\r\n                      direction=\"row\"\r\n                      justifyContent=\"center\"\r\n                      alignItems=\"center\"\r\n                      columns={9}\r\n                      sx={{ pl: 4, height: '65px' }}\r\n                    >\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          direction=\"row\"\r\n                          spacing={2}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h6\"\r\n                            color=\"textSecondary\"\r\n                            sx={{ fontWeight: 'light' }}\r\n                          >\r\n                            Pressure\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          direction=\"column\"\r\n                          spacing={0}\r\n                        >\r\n                          <img\r\n                            src={`${weatherIconsUrl}/barometer.svg`}\r\n                            alt=\"weather\"\r\n                            height=\"50px\"\r\n                            width=\"50px\"\r\n                            draggable={false}\r\n                            class=\"shadow\"\r\n                          />\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={2}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"left\"\r\n                          direction=\"row\"\r\n                          spacing={1}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h6\"\r\n                            color=\"textSecondary\"\r\n                            sx={{ fontWeight: 'light' }}\r\n                          >\r\n                            {forecast.daily[i].pressure} hPa\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n\r\n                      <Grid item xs={1}></Grid>\r\n                      <Grid item xs={1}></Grid>\r\n                      <Grid item xs={1}></Grid>\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          direction=\"row\"\r\n                          spacing={2}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h6\"\r\n                            color=\"textSecondary\"\r\n                            sx={{ fontWeight: 'light' }}\r\n                          >\r\n                            Day\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          direction=\"row\"\r\n                          spacing={2}\r\n                        >\r\n                          <Typography variant=\"h5\">\r\n                            {celsius ? (\r\n                              <b>\r\n                                {forecast.daily[i].temp.day.toFixed() - 273}°\r\n                              </b>\r\n                            ) : (\r\n                              <b>\r\n                                {(\r\n                                  ((forecast.daily[i].temp.day.toFixed() -\r\n                                    273) *\r\n                                    9) /\r\n                                    5 +\r\n                                  32\r\n                                ).toFixed()}\r\n                                °\r\n                              </b>\r\n                            )}\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Grid\r\n                      container\r\n                      direction=\"row\"\r\n                      justifyContent=\"center\"\r\n                      alignItems=\"center\"\r\n                      columns={9}\r\n                      sx={{ pl: 4, height: '65px' }}\r\n                    >\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          direction=\"row\"\r\n                          spacing={2}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h6\"\r\n                            color=\"textSecondary\"\r\n                            sx={{ fontWeight: 'light' }}\r\n                          >\r\n                            Humidity\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          direction=\"column\"\r\n                          spacing={0}\r\n                        >\r\n                          <img\r\n                            src={`${weatherFillIconsUrl}/raindrops.svg`}\r\n                            alt=\"weather\"\r\n                            height=\"50px\"\r\n                            width=\"50px\"\r\n                            draggable={false}\r\n                            class=\"shadow\"\r\n                          />\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={2}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"left\"\r\n                          direction=\"row\"\r\n                          spacing={1}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h6\"\r\n                            color=\"textSecondary\"\r\n                            sx={{ fontWeight: 'light' }}\r\n                          >\r\n                            {forecast.daily[i].humidity} %\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={1}></Grid>\r\n                      <Grid item xs={1}></Grid>\r\n                      <Grid item xs={1}></Grid>\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          direction=\"row\"\r\n                          spacing={2}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h6\"\r\n                            color=\"textSecondary\"\r\n                            sx={{ fontWeight: 'light' }}\r\n                          >\r\n                            Evening\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          direction=\"row\"\r\n                          spacing={2}\r\n                        >\r\n                          <Typography variant=\"h5\">\r\n                            {celsius ? (\r\n                              <b>\r\n                                {forecast.daily[i].temp.eve.toFixed() - 273}°\r\n                              </b>\r\n                            ) : (\r\n                              <b>\r\n                                {(\r\n                                  ((forecast.daily[i].temp.eve.toFixed() -\r\n                                    273) *\r\n                                    9) /\r\n                                    5 +\r\n                                  32\r\n                                ).toFixed()}\r\n                                °\r\n                              </b>\r\n                            )}\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Grid\r\n                      container\r\n                      direction=\"row\"\r\n                      justifyContent=\"center\"\r\n                      alignItems=\"center\"\r\n                      columns={9}\r\n                      sx={{ pl: 4, height: '65px' }}\r\n                    >\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          direction=\"row\"\r\n                          spacing={2}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h6\"\r\n                            color=\"textSecondary\"\r\n                            sx={{ fontWeight: 'light' }}\r\n                          >\r\n                            UV index\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          direction=\"column\"\r\n                          spacing={0}\r\n                        >\r\n                          <img\r\n                            src={`${weatherIconsUrl}/${getUVindexSVG(\r\n                              +forecast.daily[i].uvi.toFixed()\r\n                            )}`}\r\n                            alt=\"weather\"\r\n                            height=\"50px\"\r\n                            width=\"50px\"\r\n                            draggable={false}\r\n                            class=\"shadow\"\r\n                          />\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={2}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"left\"\r\n                          direction=\"row\"\r\n                          spacing={1}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h6\"\r\n                            color=\"textSecondary\"\r\n                            sx={{ fontWeight: 'light' }}\r\n                          >\r\n                            {getUVindex(+forecast.daily[i].uvi.toFixed())}\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={1}></Grid>\r\n                      <Grid item xs={1}></Grid>\r\n                      <Grid item xs={1}></Grid>\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          direction=\"row\"\r\n                          spacing={2}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h6\"\r\n                            color=\"textSecondary\"\r\n                            sx={{ fontWeight: 'light' }}\r\n                          >\r\n                            Night\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          direction=\"row\"\r\n                          spacing={2}\r\n                        >\r\n                          <Typography variant=\"h5\">\r\n                            {celsius ? (\r\n                              <b>\r\n                                {forecast.daily[i].temp.night.toFixed() - 273}°\r\n                              </b>\r\n                            ) : (\r\n                              <b>\r\n                                {(\r\n                                  ((forecast.daily[i].temp.night.toFixed() -\r\n                                    273) *\r\n                                    9) /\r\n                                    5 +\r\n                                  32\r\n                                ).toFixed()}\r\n                                °\r\n                              </b>\r\n                            )}\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Grid\r\n                      container\r\n                      direction=\"row\"\r\n                      justifyContent=\"center\"\r\n                      alignItems=\"center\"\r\n                      columns={9}\r\n                      sx={{ pl: 4, height: '65px' }}\r\n                    >\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          direction=\"row\"\r\n                          spacing={2}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h6\"\r\n                            color=\"textSecondary\"\r\n                            sx={{ fontWeight: 'light' }}\r\n                          >\r\n                            Moon Phase\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          direction=\"column\"\r\n                          spacing={0}\r\n                        >\r\n                          <img\r\n                            src={`${weatherFillIconsUrl}/${getMoonPhaseSvg(\r\n                              forecast.daily[i].moon_phase\r\n                            )}`}\r\n                            alt=\"weather\"\r\n                            height=\"50px\"\r\n                            width=\"50px\"\r\n                            draggable={false}\r\n                            class=\"shadow\"\r\n                          />\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={2}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"left\"\r\n                          direction=\"row\"\r\n                          spacing={2}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h6\"\r\n                            color=\"textSecondary\"\r\n                            sx={{ fontWeight: 'light' }}\r\n                          >\r\n                            {getMoonPhase(forecast.daily[i].moon_phase)}\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={1}></Grid>\r\n                      <Grid item xs={1}></Grid>\r\n                      <Grid item xs={1}></Grid>\r\n                      <Grid item xs={1}></Grid>\r\n                      <Grid item xs={1}></Grid>\r\n                    </Grid>\r\n                    <Grid\r\n                      container\r\n                      direction=\"row\"\r\n                      justifyContent=\"center\"\r\n                      alignItems=\"center\"\r\n                      columns={9}\r\n                      sx={{ pl: 4 }}\r\n                    >\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          // direction=\"row\"\r\n                          direction=\"column\"\r\n                          spacing={0}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h6\"\r\n                            color=\"textSecondary\"\r\n                            sx={{ fontWeight: 'light' }}\r\n                          >\r\n                            Sunrise\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          direction=\"column\"\r\n                          spacing={0}\r\n                        >\r\n                          <Box sx={{ mb: -2 }}>\r\n                            <img\r\n                              src={`${weatherIconsUrl}/sunrise.svg`}\r\n                              alt=\"weather\"\r\n                              height=\"50px\"\r\n                              width=\"50px\"\r\n                              draggable={false}\r\n                              class=\"shadow\"\r\n                            />\r\n                          </Box>\r\n                          <Typography\r\n                            variant=\"p\"\r\n                            color=\"textSecondary\"\r\n                            sx={{ fontWeight: 'medium' }}\r\n                          >\r\n                            {getTimeFromDailyUnix(\r\n                              forecast.daily[i].sunrise,\r\n                              forecast.timezone\r\n                            )}\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          direction=\"column\"\r\n                          spacing={0}\r\n                        >\r\n                          <Box sx={{ mb: -2 }}>\r\n                            <img\r\n                              src={`${weatherIconsUrl}/sunset.svg`}\r\n                              alt=\"weather\"\r\n                              height=\"50px\"\r\n                              width=\"50px\"\r\n                              draggable={false}\r\n                              class=\"shadow\"\r\n                            />\r\n                          </Box>\r\n                          <Typography\r\n                            variant=\"p\"\r\n                            color=\"textSecondary\"\r\n                            sx={{ fontWeight: 'medium' }}\r\n                          >\r\n                            {getTimeFromDailyUnix(\r\n                              forecast.daily[i].sunset,\r\n                              forecast.timezone\r\n                            )}\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          // direction=\"row\"\r\n                          direction=\"column\"\r\n                          spacing={0}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h6\"\r\n                            color=\"textSecondary\"\r\n                            sx={{ fontWeight: 'light' }}\r\n                          >\r\n                            Sunset\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={1}></Grid>\r\n                      <Grid item xs={1}></Grid>\r\n                      <Grid item xs={1}></Grid>\r\n                      <Grid item xs={1}></Grid>\r\n                      <Grid item xs={1}></Grid>\r\n                    </Grid>\r\n                    <Grid\r\n                      container\r\n                      direction=\"row\"\r\n                      justifyContent=\"center\"\r\n                      alignItems=\"center\"\r\n                      columns={9}\r\n                      sx={{ pl: 4 }}\r\n                    >\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          direction=\"row\"\r\n                          spacing={2}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h6\"\r\n                            color=\"textSecondary\"\r\n                            sx={{ fontWeight: 'light' }}\r\n                          >\r\n                            Moonrise\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          direction=\"column\"\r\n                          spacing={0}\r\n                        >\r\n                          <Box sx={{ mb: -2 }}>\r\n                            <img\r\n                              src={`${weatherIconsUrl}/moonrise.svg`}\r\n                              alt=\"weather\"\r\n                              height=\"50px\"\r\n                              width=\"50px\"\r\n                              draggable={false}\r\n                              class=\"shadow\"\r\n                            />\r\n                          </Box>\r\n                          <Typography\r\n                            variant=\"p\"\r\n                            color=\"textSecondary\"\r\n                            sx={{ fontWeight: 'medium' }}\r\n                          >\r\n                            {getTimeFromDailyUnix(\r\n                              forecast.daily[i].moonrise,\r\n                              forecast.timezone\r\n                            )}\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          direction=\"column\"\r\n                          spacing={0}\r\n                        >\r\n                          <Box sx={{ mb: -2 }}>\r\n                            <img\r\n                              src={`${weatherIconsUrl}/moonset.svg`}\r\n                              alt=\"weather\"\r\n                              height=\"50px\"\r\n                              width=\"50px\"\r\n                              draggable={false}\r\n                              class=\"shadow\"\r\n                            />\r\n                          </Box>\r\n                          <Typography\r\n                            variant=\"p\"\r\n                            color=\"textSecondary\"\r\n                            sx={{ fontWeight: 'medium' }}\r\n                          >\r\n                            {getTimeFromDailyUnix(\r\n                              forecast.daily[i].moonset,\r\n                              forecast.timezone\r\n                            )}\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={1}>\r\n                        <Stack\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          // direction=\"row\"\r\n                          direction=\"column\"\r\n                          spacing={0}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h6\"\r\n                            color=\"textSecondary\"\r\n                            sx={{ fontWeight: 'light' }}\r\n                          >\r\n                            Moonset\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={1}></Grid>\r\n                      <Grid item xs={1}></Grid>\r\n                      <Grid item xs={1}></Grid>\r\n                      <Grid item xs={1}></Grid>\r\n                      <Grid item xs={1}></Grid>\r\n                    </Grid>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n              ))}\r\n            </Box>\r\n\r\n            <Box sx={{ display: { xs: 'block', md: 'none' } }}>\r\n              <Stack justifyContent=\"center\" direction=\"column\" spacing={0}>\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  justifyContent=\"center\"\r\n                  alignItems=\"center\"\r\n                >\r\n                  <Grid\r\n                    item\r\n                    xs={4}\r\n                    sx={({ flexGrow: 1 }, { textAlign: 'center' })}\r\n                  >\r\n                    <Typography variant=\"h5\" color=\"textSecondary\">\r\n                      <b>Conditions</b>\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    xs={4}\r\n                    sx={({ flexGrow: 1 }, { textAlign: 'center' })}\r\n                  >\r\n                    {data.main ? (\r\n                      <img\r\n                        src={`${apiIconsUrl}/${data.weather[0].icon}.png`}\r\n                        alt=\"weather icon\"\r\n                      />\r\n                    ) : null}\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    xs={4}\r\n                    sx={({ flexGrow: 1 }, { textAlign: 'center' })}\r\n                  >\r\n                    <Typography variant=\"h5\" color=\"textSecondary\">\r\n                      {data.weather ? (\r\n                        <b>\r\n                          {data.weather[0].description\r\n                            .toLowerCase()\r\n                            .split(' ')\r\n                            .map(\r\n                              (word) =>\r\n                                word.charAt(0).toUpperCase() + word.substring(1)\r\n                            )\r\n                            .join(' ')}\r\n                        </b>\r\n                      ) : null}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  justifyContent=\"center\"\r\n                  alignItems=\"center\"\r\n                >\r\n                  <Grid\r\n                    item\r\n                    xs={4}\r\n                    sx={({ flexGrow: 1 }, { textAlign: 'center' })}\r\n                  >\r\n                    <Typography variant=\"h5\" color=\"textSecondary\">\r\n                      <b>Feels Like</b>\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    xs={4}\r\n                    sx={({ flexGrow: 1 }, { textAlign: 'center' })}\r\n                  >\r\n                    <WiThermometer style={{ fontSize: 50 }} />\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    xs={4}\r\n                    sx={({ flexGrow: 1 }, { textAlign: 'center' })}\r\n                  >\r\n                    <Typography variant=\"h5\" color=\"textSecondary\">\r\n                      {celsius ? (\r\n                        <b>{data.main.feels_like.toFixed() - 273}°C</b>\r\n                      ) : (\r\n                        <b>\r\n                          {(\r\n                            ((data.main.feels_like.toFixed() - 273) * 9) / 5 +\r\n                            32\r\n                          ).toFixed()}\r\n                          °F\r\n                        </b>\r\n                      )}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  justifyContent=\"center\"\r\n                  alignItems=\"center\"\r\n                >\r\n                  <Grid\r\n                    item\r\n                    xs={4}\r\n                    sx={({ flexGrow: 1 }, { textAlign: 'center' })}\r\n                  >\r\n                    <Typography variant=\"h5\" color=\"textSecondary\">\r\n                      <b>Humidity</b>\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    xs={4}\r\n                    sx={({ flexGrow: 1 }, { textAlign: 'center' })}\r\n                  >\r\n                    <WiHumidity style={{ fontSize: 50 }} />\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    xs={4}\r\n                    sx={({ flexGrow: 1 }, { textAlign: 'center' })}\r\n                  >\r\n                    <Typography variant=\"h5\" color=\"textSecondary\">\r\n                      {data.main ? <b>{data.main.humidity} %</b> : null}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  justifyContent=\"center\"\r\n                  alignItems=\"center\"\r\n                >\r\n                  <Grid\r\n                    item\r\n                    xs={4}\r\n                    sx={({ flexGrow: 1 }, { textAlign: 'center' })}\r\n                  >\r\n                    <Typography variant=\"h5\" color=\"textSecondary\">\r\n                      <b>Wind Speed</b>\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    xs={4}\r\n                    sx={({ flexGrow: 1 }, { textAlign: 'center' })}\r\n                  >\r\n                    <AirIcon style={{ fontSize: 50 }} />\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    xs={4}\r\n                    sx={({ flexGrow: 1 }, { textAlign: 'center' })}\r\n                  >\r\n                    <Typography variant=\"h5\" color=\"textSecondary\">\r\n                      {data.wind ? (\r\n                        <b>{data.wind.speed.toFixed(1)} m/s</b>\r\n                      ) : null}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Stack>\r\n            </Box>\r\n\r\n            {/* <Snackbar open={open} autoHideDuration={1000} onClose={handleClose}>\r\n              <Alert\r\n                onClose={handleClose}\r\n                severity=\"success\"\r\n                sx={{ width: '100%' }}\r\n              >\r\n                Great!\r\n              </Alert>\r\n            </Snackbar> */}\r\n          </Box>\r\n        ) : (\r\n          <>\r\n            <Box sx={{ display: { xs: 'none', md: 'block' } }}>\r\n              <Box\r\n                sx={{ mt: -4 }}\r\n                display=\"flex\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n              >\r\n                <img\r\n                  src={`${process.env.PUBLIC_URL}/assets/images/weather-bg.svg`}\r\n                  alt=\"weather\"\r\n                  draggable={false}\r\n                />\r\n              </Box>\r\n            </Box>\r\n\r\n            <Box sx={{ display: { md: 'none' } }}>\r\n              <Box\r\n                sx={{ mt: -4 }}\r\n                display=\"flex\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n              >\r\n                <img\r\n                  src={`${process.env.PUBLIC_URL}/assets/images/weather-bg.svg`}\r\n                  alt=\"weather\"\r\n                  height=\"80%\"\r\n                  width=\"80%\"\r\n                  draggable={false}\r\n                />\r\n              </Box>\r\n            </Box>\r\n          </>\r\n        )}\r\n      </Container>\r\n    </Box>\r\n  )\r\n}\r\n"],"names":["apiKey","process","apiUrl","weatherIconsUrl","weatherFillIconsUrl","Accordion","styled","props","disableGutters","elevation","square","theme","borderBottom","palette","divider","AccordionSummary","expandIcon","sx","fontSize","color","backgroundColor","background","default","flexDirection","transform","marginLeft","spacing","AccordionDetails","MuiAccordionDetails","padding","Alert","React","ref","variant","style","borderRadius","border","height","Search","position","shape","alpha","search","primary","marginRight","width","breakpoints","up","SearchIconWrapper","pointerEvents","display","alignItems","justifyContent","StyledInputBase","InputBase","paddingLeft","transition","transitions","create","Weather","useState","data","setData","location","setLocation","celsius","setCelsius","error","setError","open","setOpen","lat","setLat","lon","setLon","forecast","setForecast","degree","setDegree","hourlyForecast","setHourlyForecast","useEffect","JSON","parse","window","localStorage","getItem","setItem","stringify","expanded","setExpanded","handleChange","panel","event","newExpanded","urlForecast","axios","then","response","sun","dt","daily","sunrise","temp","weather","id","sunset","hourly","sort","a","b","filter","i","current","catch","console","handleClose","reason","date","Date","todayDate","Intl","DateTimeFormat","weekday","month","day","format","getDateFromUnix","unixTimestamp","dateFromUnix","getWeekdayFromUnix","getTimeFromUnix","timezone","options","timeStyle","timeZone","getTimeFromDailyUnix","unix","getDirection","degrees","Math","round","getCurrentIconUrl","dayOrNight","icon","slice","length","getHourlyIconUrl","isDay","isDay2","isSunrise","isSunset","getIconUrl","getMoonPhaseSvg","phase","getMoonPhase","getUVindexSVG","index","getUVindex","getWindSpeedSvg","speed","name","document","title","mt","maxwidth","main","component","textAlign","onClick","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","urlGeo","wind","deg","size","placeholder","inputProps","value","onChange","target","onKeyPress","url","key","coord","autoHideDuration","onClose","severity","fontWeight","container","direction","item","xs","md","prev","alt","src","sys","country","draggable","class","flexGrow","letterSpacing","toUpperCase","description","toFixed","ml","mr","feels_like","borderBottomWidth","columns","pressure","humidity","initialActiveIndex","itemsToScroll","itemsToShow","map","night","pl","wind_speed","wind_deg","morn","eve","uvi","moon_phase","mb","moonrise","moonset","toLowerCase","split","word","charAt","substring","join"],"sourceRoot":""}